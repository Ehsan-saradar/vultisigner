// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"vultisigner/ent/migrate"

	"vultisigner/ent/ecdsalocaldata"
	"vultisigner/ent/ecdsapub"
	"vultisigner/ent/eddsalocaldata"
	"vultisigner/ent/pailliersk"
	"vultisigner/ent/vault"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ECDSAPub is the client for interacting with the ECDSAPub builders.
	ECDSAPub *ECDSAPubClient
	// EcdsaLocalData is the client for interacting with the EcdsaLocalData builders.
	EcdsaLocalData *EcdsaLocalDataClient
	// EddsaLocalData is the client for interacting with the EddsaLocalData builders.
	EddsaLocalData *EddsaLocalDataClient
	// PaillierSK is the client for interacting with the PaillierSK builders.
	PaillierSK *PaillierSKClient
	// Vault is the client for interacting with the Vault builders.
	Vault *VaultClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ECDSAPub = NewECDSAPubClient(c.config)
	c.EcdsaLocalData = NewEcdsaLocalDataClient(c.config)
	c.EddsaLocalData = NewEddsaLocalDataClient(c.config)
	c.PaillierSK = NewPaillierSKClient(c.config)
	c.Vault = NewVaultClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ECDSAPub:       NewECDSAPubClient(cfg),
		EcdsaLocalData: NewEcdsaLocalDataClient(cfg),
		EddsaLocalData: NewEddsaLocalDataClient(cfg),
		PaillierSK:     NewPaillierSKClient(cfg),
		Vault:          NewVaultClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ECDSAPub:       NewECDSAPubClient(cfg),
		EcdsaLocalData: NewEcdsaLocalDataClient(cfg),
		EddsaLocalData: NewEddsaLocalDataClient(cfg),
		PaillierSK:     NewPaillierSKClient(cfg),
		Vault:          NewVaultClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ECDSAPub.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ECDSAPub.Use(hooks...)
	c.EcdsaLocalData.Use(hooks...)
	c.EddsaLocalData.Use(hooks...)
	c.PaillierSK.Use(hooks...)
	c.Vault.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ECDSAPub.Intercept(interceptors...)
	c.EcdsaLocalData.Intercept(interceptors...)
	c.EddsaLocalData.Intercept(interceptors...)
	c.PaillierSK.Intercept(interceptors...)
	c.Vault.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ECDSAPubMutation:
		return c.ECDSAPub.mutate(ctx, m)
	case *EcdsaLocalDataMutation:
		return c.EcdsaLocalData.mutate(ctx, m)
	case *EddsaLocalDataMutation:
		return c.EddsaLocalData.mutate(ctx, m)
	case *PaillierSKMutation:
		return c.PaillierSK.mutate(ctx, m)
	case *VaultMutation:
		return c.Vault.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ECDSAPubClient is a client for the ECDSAPub schema.
type ECDSAPubClient struct {
	config
}

// NewECDSAPubClient returns a client for the ECDSAPub from the given config.
func NewECDSAPubClient(c config) *ECDSAPubClient {
	return &ECDSAPubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ecdsapub.Hooks(f(g(h())))`.
func (c *ECDSAPubClient) Use(hooks ...Hook) {
	c.hooks.ECDSAPub = append(c.hooks.ECDSAPub, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ecdsapub.Intercept(f(g(h())))`.
func (c *ECDSAPubClient) Intercept(interceptors ...Interceptor) {
	c.inters.ECDSAPub = append(c.inters.ECDSAPub, interceptors...)
}

// Create returns a builder for creating a ECDSAPub entity.
func (c *ECDSAPubClient) Create() *ECDSAPubCreate {
	mutation := newECDSAPubMutation(c.config, OpCreate)
	return &ECDSAPubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ECDSAPub entities.
func (c *ECDSAPubClient) CreateBulk(builders ...*ECDSAPubCreate) *ECDSAPubCreateBulk {
	return &ECDSAPubCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ECDSAPubClient) MapCreateBulk(slice any, setFunc func(*ECDSAPubCreate, int)) *ECDSAPubCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ECDSAPubCreateBulk{err: fmt.Errorf("calling to ECDSAPubClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ECDSAPubCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ECDSAPubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ECDSAPub.
func (c *ECDSAPubClient) Update() *ECDSAPubUpdate {
	mutation := newECDSAPubMutation(c.config, OpUpdate)
	return &ECDSAPubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ECDSAPubClient) UpdateOne(ep *ECDSAPub) *ECDSAPubUpdateOne {
	mutation := newECDSAPubMutation(c.config, OpUpdateOne, withECDSAPub(ep))
	return &ECDSAPubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ECDSAPubClient) UpdateOneID(id int) *ECDSAPubUpdateOne {
	mutation := newECDSAPubMutation(c.config, OpUpdateOne, withECDSAPubID(id))
	return &ECDSAPubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ECDSAPub.
func (c *ECDSAPubClient) Delete() *ECDSAPubDelete {
	mutation := newECDSAPubMutation(c.config, OpDelete)
	return &ECDSAPubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ECDSAPubClient) DeleteOne(ep *ECDSAPub) *ECDSAPubDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ECDSAPubClient) DeleteOneID(id int) *ECDSAPubDeleteOne {
	builder := c.Delete().Where(ecdsapub.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ECDSAPubDeleteOne{builder}
}

// Query returns a query builder for ECDSAPub.
func (c *ECDSAPubClient) Query() *ECDSAPubQuery {
	return &ECDSAPubQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeECDSAPub},
		inters: c.Interceptors(),
	}
}

// Get returns a ECDSAPub entity by its id.
func (c *ECDSAPubClient) Get(ctx context.Context, id int) (*ECDSAPub, error) {
	return c.Query().Where(ecdsapub.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ECDSAPubClient) GetX(ctx context.Context, id int) *ECDSAPub {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVault queries the vault edge of a ECDSAPub.
func (c *ECDSAPubClient) QueryVault(ep *ECDSAPub) *VaultQuery {
	query := (&VaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ecdsapub.Table, ecdsapub.FieldID, id),
			sqlgraph.To(vault.Table, vault.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ecdsapub.VaultTable, ecdsapub.VaultColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ECDSAPubClient) Hooks() []Hook {
	return c.hooks.ECDSAPub
}

// Interceptors returns the client interceptors.
func (c *ECDSAPubClient) Interceptors() []Interceptor {
	return c.inters.ECDSAPub
}

func (c *ECDSAPubClient) mutate(ctx context.Context, m *ECDSAPubMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ECDSAPubCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ECDSAPubUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ECDSAPubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ECDSAPubDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ECDSAPub mutation op: %q", m.Op())
	}
}

// EcdsaLocalDataClient is a client for the EcdsaLocalData schema.
type EcdsaLocalDataClient struct {
	config
}

// NewEcdsaLocalDataClient returns a client for the EcdsaLocalData from the given config.
func NewEcdsaLocalDataClient(c config) *EcdsaLocalDataClient {
	return &EcdsaLocalDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ecdsalocaldata.Hooks(f(g(h())))`.
func (c *EcdsaLocalDataClient) Use(hooks ...Hook) {
	c.hooks.EcdsaLocalData = append(c.hooks.EcdsaLocalData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ecdsalocaldata.Intercept(f(g(h())))`.
func (c *EcdsaLocalDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.EcdsaLocalData = append(c.inters.EcdsaLocalData, interceptors...)
}

// Create returns a builder for creating a EcdsaLocalData entity.
func (c *EcdsaLocalDataClient) Create() *EcdsaLocalDataCreate {
	mutation := newEcdsaLocalDataMutation(c.config, OpCreate)
	return &EcdsaLocalDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EcdsaLocalData entities.
func (c *EcdsaLocalDataClient) CreateBulk(builders ...*EcdsaLocalDataCreate) *EcdsaLocalDataCreateBulk {
	return &EcdsaLocalDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EcdsaLocalDataClient) MapCreateBulk(slice any, setFunc func(*EcdsaLocalDataCreate, int)) *EcdsaLocalDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EcdsaLocalDataCreateBulk{err: fmt.Errorf("calling to EcdsaLocalDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EcdsaLocalDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EcdsaLocalDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EcdsaLocalData.
func (c *EcdsaLocalDataClient) Update() *EcdsaLocalDataUpdate {
	mutation := newEcdsaLocalDataMutation(c.config, OpUpdate)
	return &EcdsaLocalDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EcdsaLocalDataClient) UpdateOne(eld *EcdsaLocalData) *EcdsaLocalDataUpdateOne {
	mutation := newEcdsaLocalDataMutation(c.config, OpUpdateOne, withEcdsaLocalData(eld))
	return &EcdsaLocalDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EcdsaLocalDataClient) UpdateOneID(id int) *EcdsaLocalDataUpdateOne {
	mutation := newEcdsaLocalDataMutation(c.config, OpUpdateOne, withEcdsaLocalDataID(id))
	return &EcdsaLocalDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EcdsaLocalData.
func (c *EcdsaLocalDataClient) Delete() *EcdsaLocalDataDelete {
	mutation := newEcdsaLocalDataMutation(c.config, OpDelete)
	return &EcdsaLocalDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EcdsaLocalDataClient) DeleteOne(eld *EcdsaLocalData) *EcdsaLocalDataDeleteOne {
	return c.DeleteOneID(eld.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EcdsaLocalDataClient) DeleteOneID(id int) *EcdsaLocalDataDeleteOne {
	builder := c.Delete().Where(ecdsalocaldata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EcdsaLocalDataDeleteOne{builder}
}

// Query returns a query builder for EcdsaLocalData.
func (c *EcdsaLocalDataClient) Query() *EcdsaLocalDataQuery {
	return &EcdsaLocalDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEcdsaLocalData},
		inters: c.Interceptors(),
	}
}

// Get returns a EcdsaLocalData entity by its id.
func (c *EcdsaLocalDataClient) Get(ctx context.Context, id int) (*EcdsaLocalData, error) {
	return c.Query().Where(ecdsalocaldata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EcdsaLocalDataClient) GetX(ctx context.Context, id int) *EcdsaLocalData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVault queries the vault edge of a EcdsaLocalData.
func (c *EcdsaLocalDataClient) QueryVault(eld *EcdsaLocalData) *VaultQuery {
	query := (&VaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eld.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ecdsalocaldata.Table, ecdsalocaldata.FieldID, id),
			sqlgraph.To(vault.Table, vault.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ecdsalocaldata.VaultTable, ecdsalocaldata.VaultColumn),
		)
		fromV = sqlgraph.Neighbors(eld.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EcdsaLocalDataClient) Hooks() []Hook {
	return c.hooks.EcdsaLocalData
}

// Interceptors returns the client interceptors.
func (c *EcdsaLocalDataClient) Interceptors() []Interceptor {
	return c.inters.EcdsaLocalData
}

func (c *EcdsaLocalDataClient) mutate(ctx context.Context, m *EcdsaLocalDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EcdsaLocalDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EcdsaLocalDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EcdsaLocalDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EcdsaLocalDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EcdsaLocalData mutation op: %q", m.Op())
	}
}

// EddsaLocalDataClient is a client for the EddsaLocalData schema.
type EddsaLocalDataClient struct {
	config
}

// NewEddsaLocalDataClient returns a client for the EddsaLocalData from the given config.
func NewEddsaLocalDataClient(c config) *EddsaLocalDataClient {
	return &EddsaLocalDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eddsalocaldata.Hooks(f(g(h())))`.
func (c *EddsaLocalDataClient) Use(hooks ...Hook) {
	c.hooks.EddsaLocalData = append(c.hooks.EddsaLocalData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `eddsalocaldata.Intercept(f(g(h())))`.
func (c *EddsaLocalDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.EddsaLocalData = append(c.inters.EddsaLocalData, interceptors...)
}

// Create returns a builder for creating a EddsaLocalData entity.
func (c *EddsaLocalDataClient) Create() *EddsaLocalDataCreate {
	mutation := newEddsaLocalDataMutation(c.config, OpCreate)
	return &EddsaLocalDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EddsaLocalData entities.
func (c *EddsaLocalDataClient) CreateBulk(builders ...*EddsaLocalDataCreate) *EddsaLocalDataCreateBulk {
	return &EddsaLocalDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EddsaLocalDataClient) MapCreateBulk(slice any, setFunc func(*EddsaLocalDataCreate, int)) *EddsaLocalDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EddsaLocalDataCreateBulk{err: fmt.Errorf("calling to EddsaLocalDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EddsaLocalDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EddsaLocalDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EddsaLocalData.
func (c *EddsaLocalDataClient) Update() *EddsaLocalDataUpdate {
	mutation := newEddsaLocalDataMutation(c.config, OpUpdate)
	return &EddsaLocalDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EddsaLocalDataClient) UpdateOne(eld *EddsaLocalData) *EddsaLocalDataUpdateOne {
	mutation := newEddsaLocalDataMutation(c.config, OpUpdateOne, withEddsaLocalData(eld))
	return &EddsaLocalDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EddsaLocalDataClient) UpdateOneID(id int) *EddsaLocalDataUpdateOne {
	mutation := newEddsaLocalDataMutation(c.config, OpUpdateOne, withEddsaLocalDataID(id))
	return &EddsaLocalDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EddsaLocalData.
func (c *EddsaLocalDataClient) Delete() *EddsaLocalDataDelete {
	mutation := newEddsaLocalDataMutation(c.config, OpDelete)
	return &EddsaLocalDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EddsaLocalDataClient) DeleteOne(eld *EddsaLocalData) *EddsaLocalDataDeleteOne {
	return c.DeleteOneID(eld.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EddsaLocalDataClient) DeleteOneID(id int) *EddsaLocalDataDeleteOne {
	builder := c.Delete().Where(eddsalocaldata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EddsaLocalDataDeleteOne{builder}
}

// Query returns a query builder for EddsaLocalData.
func (c *EddsaLocalDataClient) Query() *EddsaLocalDataQuery {
	return &EddsaLocalDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEddsaLocalData},
		inters: c.Interceptors(),
	}
}

// Get returns a EddsaLocalData entity by its id.
func (c *EddsaLocalDataClient) Get(ctx context.Context, id int) (*EddsaLocalData, error) {
	return c.Query().Where(eddsalocaldata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EddsaLocalDataClient) GetX(ctx context.Context, id int) *EddsaLocalData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVault queries the vault edge of a EddsaLocalData.
func (c *EddsaLocalDataClient) QueryVault(eld *EddsaLocalData) *VaultQuery {
	query := (&VaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eld.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eddsalocaldata.Table, eddsalocaldata.FieldID, id),
			sqlgraph.To(vault.Table, vault.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, eddsalocaldata.VaultTable, eddsalocaldata.VaultColumn),
		)
		fromV = sqlgraph.Neighbors(eld.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EddsaLocalDataClient) Hooks() []Hook {
	return c.hooks.EddsaLocalData
}

// Interceptors returns the client interceptors.
func (c *EddsaLocalDataClient) Interceptors() []Interceptor {
	return c.inters.EddsaLocalData
}

func (c *EddsaLocalDataClient) mutate(ctx context.Context, m *EddsaLocalDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EddsaLocalDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EddsaLocalDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EddsaLocalDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EddsaLocalDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EddsaLocalData mutation op: %q", m.Op())
	}
}

// PaillierSKClient is a client for the PaillierSK schema.
type PaillierSKClient struct {
	config
}

// NewPaillierSKClient returns a client for the PaillierSK from the given config.
func NewPaillierSKClient(c config) *PaillierSKClient {
	return &PaillierSKClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pailliersk.Hooks(f(g(h())))`.
func (c *PaillierSKClient) Use(hooks ...Hook) {
	c.hooks.PaillierSK = append(c.hooks.PaillierSK, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pailliersk.Intercept(f(g(h())))`.
func (c *PaillierSKClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaillierSK = append(c.inters.PaillierSK, interceptors...)
}

// Create returns a builder for creating a PaillierSK entity.
func (c *PaillierSKClient) Create() *PaillierSKCreate {
	mutation := newPaillierSKMutation(c.config, OpCreate)
	return &PaillierSKCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaillierSK entities.
func (c *PaillierSKClient) CreateBulk(builders ...*PaillierSKCreate) *PaillierSKCreateBulk {
	return &PaillierSKCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaillierSKClient) MapCreateBulk(slice any, setFunc func(*PaillierSKCreate, int)) *PaillierSKCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaillierSKCreateBulk{err: fmt.Errorf("calling to PaillierSKClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaillierSKCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaillierSKCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaillierSK.
func (c *PaillierSKClient) Update() *PaillierSKUpdate {
	mutation := newPaillierSKMutation(c.config, OpUpdate)
	return &PaillierSKUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaillierSKClient) UpdateOne(ps *PaillierSK) *PaillierSKUpdateOne {
	mutation := newPaillierSKMutation(c.config, OpUpdateOne, withPaillierSK(ps))
	return &PaillierSKUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaillierSKClient) UpdateOneID(id int) *PaillierSKUpdateOne {
	mutation := newPaillierSKMutation(c.config, OpUpdateOne, withPaillierSKID(id))
	return &PaillierSKUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaillierSK.
func (c *PaillierSKClient) Delete() *PaillierSKDelete {
	mutation := newPaillierSKMutation(c.config, OpDelete)
	return &PaillierSKDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaillierSKClient) DeleteOne(ps *PaillierSK) *PaillierSKDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaillierSKClient) DeleteOneID(id int) *PaillierSKDeleteOne {
	builder := c.Delete().Where(pailliersk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaillierSKDeleteOne{builder}
}

// Query returns a query builder for PaillierSK.
func (c *PaillierSKClient) Query() *PaillierSKQuery {
	return &PaillierSKQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaillierSK},
		inters: c.Interceptors(),
	}
}

// Get returns a PaillierSK entity by its id.
func (c *PaillierSKClient) Get(ctx context.Context, id int) (*PaillierSK, error) {
	return c.Query().Where(pailliersk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaillierSKClient) GetX(ctx context.Context, id int) *PaillierSK {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVault queries the vault edge of a PaillierSK.
func (c *PaillierSKClient) QueryVault(ps *PaillierSK) *VaultQuery {
	query := (&VaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pailliersk.Table, pailliersk.FieldID, id),
			sqlgraph.To(vault.Table, vault.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, pailliersk.VaultTable, pailliersk.VaultColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaillierSKClient) Hooks() []Hook {
	return c.hooks.PaillierSK
}

// Interceptors returns the client interceptors.
func (c *PaillierSKClient) Interceptors() []Interceptor {
	return c.inters.PaillierSK
}

func (c *PaillierSKClient) mutate(ctx context.Context, m *PaillierSKMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaillierSKCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaillierSKUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaillierSKUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaillierSKDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaillierSK mutation op: %q", m.Op())
	}
}

// VaultClient is a client for the Vault schema.
type VaultClient struct {
	config
}

// NewVaultClient returns a client for the Vault from the given config.
func NewVaultClient(c config) *VaultClient {
	return &VaultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vault.Hooks(f(g(h())))`.
func (c *VaultClient) Use(hooks ...Hook) {
	c.hooks.Vault = append(c.hooks.Vault, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vault.Intercept(f(g(h())))`.
func (c *VaultClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vault = append(c.inters.Vault, interceptors...)
}

// Create returns a builder for creating a Vault entity.
func (c *VaultClient) Create() *VaultCreate {
	mutation := newVaultMutation(c.config, OpCreate)
	return &VaultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vault entities.
func (c *VaultClient) CreateBulk(builders ...*VaultCreate) *VaultCreateBulk {
	return &VaultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VaultClient) MapCreateBulk(slice any, setFunc func(*VaultCreate, int)) *VaultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VaultCreateBulk{err: fmt.Errorf("calling to VaultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VaultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VaultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vault.
func (c *VaultClient) Update() *VaultUpdate {
	mutation := newVaultMutation(c.config, OpUpdate)
	return &VaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VaultClient) UpdateOne(v *Vault) *VaultUpdateOne {
	mutation := newVaultMutation(c.config, OpUpdateOne, withVault(v))
	return &VaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VaultClient) UpdateOneID(id int) *VaultUpdateOne {
	mutation := newVaultMutation(c.config, OpUpdateOne, withVaultID(id))
	return &VaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vault.
func (c *VaultClient) Delete() *VaultDelete {
	mutation := newVaultMutation(c.config, OpDelete)
	return &VaultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VaultClient) DeleteOne(v *Vault) *VaultDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VaultClient) DeleteOneID(id int) *VaultDeleteOne {
	builder := c.Delete().Where(vault.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VaultDeleteOne{builder}
}

// Query returns a query builder for Vault.
func (c *VaultClient) Query() *VaultQuery {
	return &VaultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVault},
		inters: c.Interceptors(),
	}
}

// Get returns a Vault entity by its id.
func (c *VaultClient) Get(ctx context.Context, id int) (*Vault, error) {
	return c.Query().Where(vault.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VaultClient) GetX(ctx context.Context, id int) *Vault {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPaillierSk queries the paillier_sk edge of a Vault.
func (c *VaultClient) QueryPaillierSk(v *Vault) *PaillierSKQuery {
	query := (&PaillierSKClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vault.Table, vault.FieldID, id),
			sqlgraph.To(pailliersk.Table, pailliersk.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, vault.PaillierSkTable, vault.PaillierSkColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEcdsaLocalData queries the ecdsa_local_data edge of a Vault.
func (c *VaultClient) QueryEcdsaLocalData(v *Vault) *EcdsaLocalDataQuery {
	query := (&EcdsaLocalDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vault.Table, vault.FieldID, id),
			sqlgraph.To(ecdsalocaldata.Table, ecdsalocaldata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, vault.EcdsaLocalDataTable, vault.EcdsaLocalDataColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEddsaLocalData queries the eddsa_local_data edge of a Vault.
func (c *VaultClient) QueryEddsaLocalData(v *Vault) *EddsaLocalDataQuery {
	query := (&EddsaLocalDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vault.Table, vault.FieldID, id),
			sqlgraph.To(eddsalocaldata.Table, eddsalocaldata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, vault.EddsaLocalDataTable, vault.EddsaLocalDataColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VaultClient) Hooks() []Hook {
	return c.hooks.Vault
}

// Interceptors returns the client interceptors.
func (c *VaultClient) Interceptors() []Interceptor {
	return c.inters.Vault
}

func (c *VaultClient) mutate(ctx context.Context, m *VaultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VaultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VaultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VaultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vault mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ECDSAPub, EcdsaLocalData, EddsaLocalData, PaillierSK, Vault []ent.Hook
	}
	inters struct {
		ECDSAPub, EcdsaLocalData, EddsaLocalData, PaillierSK, Vault []ent.Interceptor
	}
)
