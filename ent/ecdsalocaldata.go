// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"vultisigner/ent/ecdsalocaldata"
	"vultisigner/ent/schema"
	"vultisigner/ent/vault"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EcdsaLocalData is the model entity for the EcdsaLocalData schema.
type EcdsaLocalData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NTildeI holds the value of the "n_tilde_i" field.
	NTildeI string `json:"n_tilde_i,omitempty"`
	// H1i holds the value of the "h1i" field.
	H1i string `json:"h1i,omitempty"`
	// H2i holds the value of the "h2i" field.
	H2i string `json:"h2i,omitempty"`
	// Alpha holds the value of the "alpha" field.
	Alpha string `json:"alpha,omitempty"`
	// Beta holds the value of the "beta" field.
	Beta string `json:"beta,omitempty"`
	// P holds the value of the "p" field.
	P string `json:"p,omitempty"`
	// Q holds the value of the "q" field.
	Q string `json:"q,omitempty"`
	// Xi holds the value of the "xi" field.
	Xi string `json:"xi,omitempty"`
	// ShareID holds the value of the "share_id" field.
	ShareID string `json:"share_id,omitempty"`
	// Ks holds the value of the "ks" field.
	Ks []string `json:"ks,omitempty"`
	// NTildeJ holds the value of the "n_tilde_j" field.
	NTildeJ []string `json:"n_tilde_j,omitempty"`
	// H1j holds the value of the "h1j" field.
	H1j []string `json:"h1j,omitempty"`
	// H2j holds the value of the "h2j" field.
	H2j []string `json:"h2j,omitempty"`
	// BigXj holds the value of the "big_xj" field.
	BigXj []schema.ECDSAPub `json:"big_xj,omitempty"`
	// PaillierPks holds the value of the "paillier_pks" field.
	PaillierPks []string `json:"paillier_pks,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EcdsaLocalDataQuery when eager-loading is set.
	Edges        EcdsaLocalDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EcdsaLocalDataEdges holds the relations/edges for other nodes in the graph.
type EcdsaLocalDataEdges struct {
	// Vault holds the value of the vault edge.
	Vault *Vault `json:"vault,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VaultOrErr returns the Vault value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EcdsaLocalDataEdges) VaultOrErr() (*Vault, error) {
	if e.Vault != nil {
		return e.Vault, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vault.Label}
	}
	return nil, &NotLoadedError{edge: "vault"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EcdsaLocalData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ecdsalocaldata.FieldKs, ecdsalocaldata.FieldNTildeJ, ecdsalocaldata.FieldH1j, ecdsalocaldata.FieldH2j, ecdsalocaldata.FieldBigXj, ecdsalocaldata.FieldPaillierPks:
			values[i] = new([]byte)
		case ecdsalocaldata.FieldID:
			values[i] = new(sql.NullInt64)
		case ecdsalocaldata.FieldNTildeI, ecdsalocaldata.FieldH1i, ecdsalocaldata.FieldH2i, ecdsalocaldata.FieldAlpha, ecdsalocaldata.FieldBeta, ecdsalocaldata.FieldP, ecdsalocaldata.FieldQ, ecdsalocaldata.FieldXi, ecdsalocaldata.FieldShareID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EcdsaLocalData fields.
func (eld *EcdsaLocalData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ecdsalocaldata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eld.ID = int(value.Int64)
		case ecdsalocaldata.FieldNTildeI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field n_tilde_i", values[i])
			} else if value.Valid {
				eld.NTildeI = value.String
			}
		case ecdsalocaldata.FieldH1i:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h1i", values[i])
			} else if value.Valid {
				eld.H1i = value.String
			}
		case ecdsalocaldata.FieldH2i:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h2i", values[i])
			} else if value.Valid {
				eld.H2i = value.String
			}
		case ecdsalocaldata.FieldAlpha:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alpha", values[i])
			} else if value.Valid {
				eld.Alpha = value.String
			}
		case ecdsalocaldata.FieldBeta:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field beta", values[i])
			} else if value.Valid {
				eld.Beta = value.String
			}
		case ecdsalocaldata.FieldP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field p", values[i])
			} else if value.Valid {
				eld.P = value.String
			}
		case ecdsalocaldata.FieldQ:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q", values[i])
			} else if value.Valid {
				eld.Q = value.String
			}
		case ecdsalocaldata.FieldXi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xi", values[i])
			} else if value.Valid {
				eld.Xi = value.String
			}
		case ecdsalocaldata.FieldShareID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share_id", values[i])
			} else if value.Valid {
				eld.ShareID = value.String
			}
		case ecdsalocaldata.FieldKs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eld.Ks); err != nil {
					return fmt.Errorf("unmarshal field ks: %w", err)
				}
			}
		case ecdsalocaldata.FieldNTildeJ:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field n_tilde_j", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eld.NTildeJ); err != nil {
					return fmt.Errorf("unmarshal field n_tilde_j: %w", err)
				}
			}
		case ecdsalocaldata.FieldH1j:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field h1j", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eld.H1j); err != nil {
					return fmt.Errorf("unmarshal field h1j: %w", err)
				}
			}
		case ecdsalocaldata.FieldH2j:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field h2j", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eld.H2j); err != nil {
					return fmt.Errorf("unmarshal field h2j: %w", err)
				}
			}
		case ecdsalocaldata.FieldBigXj:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field big_xj", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eld.BigXj); err != nil {
					return fmt.Errorf("unmarshal field big_xj: %w", err)
				}
			}
		case ecdsalocaldata.FieldPaillierPks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field paillier_pks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eld.PaillierPks); err != nil {
					return fmt.Errorf("unmarshal field paillier_pks: %w", err)
				}
			}
		default:
			eld.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EcdsaLocalData.
// This includes values selected through modifiers, order, etc.
func (eld *EcdsaLocalData) Value(name string) (ent.Value, error) {
	return eld.selectValues.Get(name)
}

// QueryVault queries the "vault" edge of the EcdsaLocalData entity.
func (eld *EcdsaLocalData) QueryVault() *VaultQuery {
	return NewEcdsaLocalDataClient(eld.config).QueryVault(eld)
}

// Update returns a builder for updating this EcdsaLocalData.
// Note that you need to call EcdsaLocalData.Unwrap() before calling this method if this EcdsaLocalData
// was returned from a transaction, and the transaction was committed or rolled back.
func (eld *EcdsaLocalData) Update() *EcdsaLocalDataUpdateOne {
	return NewEcdsaLocalDataClient(eld.config).UpdateOne(eld)
}

// Unwrap unwraps the EcdsaLocalData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eld *EcdsaLocalData) Unwrap() *EcdsaLocalData {
	_tx, ok := eld.config.driver.(*txDriver)
	if !ok {
		panic("ent: EcdsaLocalData is not a transactional entity")
	}
	eld.config.driver = _tx.drv
	return eld
}

// String implements the fmt.Stringer.
func (eld *EcdsaLocalData) String() string {
	var builder strings.Builder
	builder.WriteString("EcdsaLocalData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eld.ID))
	builder.WriteString("n_tilde_i=")
	builder.WriteString(eld.NTildeI)
	builder.WriteString(", ")
	builder.WriteString("h1i=")
	builder.WriteString(eld.H1i)
	builder.WriteString(", ")
	builder.WriteString("h2i=")
	builder.WriteString(eld.H2i)
	builder.WriteString(", ")
	builder.WriteString("alpha=")
	builder.WriteString(eld.Alpha)
	builder.WriteString(", ")
	builder.WriteString("beta=")
	builder.WriteString(eld.Beta)
	builder.WriteString(", ")
	builder.WriteString("p=")
	builder.WriteString(eld.P)
	builder.WriteString(", ")
	builder.WriteString("q=")
	builder.WriteString(eld.Q)
	builder.WriteString(", ")
	builder.WriteString("xi=")
	builder.WriteString(eld.Xi)
	builder.WriteString(", ")
	builder.WriteString("share_id=")
	builder.WriteString(eld.ShareID)
	builder.WriteString(", ")
	builder.WriteString("ks=")
	builder.WriteString(fmt.Sprintf("%v", eld.Ks))
	builder.WriteString(", ")
	builder.WriteString("n_tilde_j=")
	builder.WriteString(fmt.Sprintf("%v", eld.NTildeJ))
	builder.WriteString(", ")
	builder.WriteString("h1j=")
	builder.WriteString(fmt.Sprintf("%v", eld.H1j))
	builder.WriteString(", ")
	builder.WriteString("h2j=")
	builder.WriteString(fmt.Sprintf("%v", eld.H2j))
	builder.WriteString(", ")
	builder.WriteString("big_xj=")
	builder.WriteString(fmt.Sprintf("%v", eld.BigXj))
	builder.WriteString(", ")
	builder.WriteString("paillier_pks=")
	builder.WriteString(fmt.Sprintf("%v", eld.PaillierPks))
	builder.WriteByte(')')
	return builder.String()
}

// EcdsaLocalDataSlice is a parsable slice of EcdsaLocalData.
type EcdsaLocalDataSlice []*EcdsaLocalData
