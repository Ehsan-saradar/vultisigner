// Code generated by ent, DO NOT EDIT.

package ecdsalocaldata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ecdsalocaldata type in the database.
	Label = "ecdsa_local_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNTildeI holds the string denoting the n_tilde_i field in the database.
	FieldNTildeI = "n_tilde_i"
	// FieldH1i holds the string denoting the h1i field in the database.
	FieldH1i = "h1i"
	// FieldH2i holds the string denoting the h2i field in the database.
	FieldH2i = "h2i"
	// FieldAlpha holds the string denoting the alpha field in the database.
	FieldAlpha = "alpha"
	// FieldBeta holds the string denoting the beta field in the database.
	FieldBeta = "beta"
	// FieldP holds the string denoting the p field in the database.
	FieldP = "p"
	// FieldQ holds the string denoting the q field in the database.
	FieldQ = "q"
	// FieldXi holds the string denoting the xi field in the database.
	FieldXi = "xi"
	// FieldShareID holds the string denoting the share_id field in the database.
	FieldShareID = "share_id"
	// FieldKs holds the string denoting the ks field in the database.
	FieldKs = "ks"
	// FieldNTildeJ holds the string denoting the n_tilde_j field in the database.
	FieldNTildeJ = "n_tilde_j"
	// FieldH1j holds the string denoting the h1j field in the database.
	FieldH1j = "h1j"
	// FieldH2j holds the string denoting the h2j field in the database.
	FieldH2j = "h2j"
	// FieldBigXj holds the string denoting the big_xj field in the database.
	FieldBigXj = "big_xj"
	// FieldPaillierPks holds the string denoting the paillier_pks field in the database.
	FieldPaillierPks = "paillier_pks"
	// EdgeVault holds the string denoting the vault edge name in mutations.
	EdgeVault = "vault"
	// Table holds the table name of the ecdsalocaldata in the database.
	Table = "ecdsa_local_data"
	// VaultTable is the table that holds the vault relation/edge.
	VaultTable = "vaults"
	// VaultInverseTable is the table name for the Vault entity.
	// It exists in this package in order to avoid circular dependency with the "vault" package.
	VaultInverseTable = "vaults"
	// VaultColumn is the table column denoting the vault relation/edge.
	VaultColumn = "ecdsa_local_data_vault"
)

// Columns holds all SQL columns for ecdsalocaldata fields.
var Columns = []string{
	FieldID,
	FieldNTildeI,
	FieldH1i,
	FieldH2i,
	FieldAlpha,
	FieldBeta,
	FieldP,
	FieldQ,
	FieldXi,
	FieldShareID,
	FieldKs,
	FieldNTildeJ,
	FieldH1j,
	FieldH2j,
	FieldBigXj,
	FieldPaillierPks,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NTildeIValidator is a validator for the "n_tilde_i" field. It is called by the builders before save.
	NTildeIValidator func(string) error
	// H1iValidator is a validator for the "h1i" field. It is called by the builders before save.
	H1iValidator func(string) error
	// H2iValidator is a validator for the "h2i" field. It is called by the builders before save.
	H2iValidator func(string) error
	// AlphaValidator is a validator for the "alpha" field. It is called by the builders before save.
	AlphaValidator func(string) error
	// BetaValidator is a validator for the "beta" field. It is called by the builders before save.
	BetaValidator func(string) error
	// PValidator is a validator for the "p" field. It is called by the builders before save.
	PValidator func(string) error
	// QValidator is a validator for the "q" field. It is called by the builders before save.
	QValidator func(string) error
	// XiValidator is a validator for the "xi" field. It is called by the builders before save.
	XiValidator func(string) error
	// ShareIDValidator is a validator for the "share_id" field. It is called by the builders before save.
	ShareIDValidator func(string) error
)

// OrderOption defines the ordering options for the EcdsaLocalData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNTildeI orders the results by the n_tilde_i field.
func ByNTildeI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNTildeI, opts...).ToFunc()
}

// ByH1i orders the results by the h1i field.
func ByH1i(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldH1i, opts...).ToFunc()
}

// ByH2i orders the results by the h2i field.
func ByH2i(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldH2i, opts...).ToFunc()
}

// ByAlpha orders the results by the alpha field.
func ByAlpha(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlpha, opts...).ToFunc()
}

// ByBeta orders the results by the beta field.
func ByBeta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeta, opts...).ToFunc()
}

// ByP orders the results by the p field.
func ByP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP, opts...).ToFunc()
}

// ByQ orders the results by the q field.
func ByQ(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQ, opts...).ToFunc()
}

// ByXi orders the results by the xi field.
func ByXi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXi, opts...).ToFunc()
}

// ByShareID orders the results by the share_id field.
func ByShareID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShareID, opts...).ToFunc()
}

// ByVaultField orders the results by vault field.
func ByVaultField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVaultStep(), sql.OrderByField(field, opts...))
	}
}
func newVaultStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VaultInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, VaultTable, VaultColumn),
	)
}
