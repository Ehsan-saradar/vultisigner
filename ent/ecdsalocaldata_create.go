// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/ecdsalocaldata"
	"vultisigner/ent/schema"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EcdsaLocalDataCreate is the builder for creating a EcdsaLocalData entity.
type EcdsaLocalDataCreate struct {
	config
	mutation *EcdsaLocalDataMutation
	hooks    []Hook
}

// SetNTildeI sets the "n_tilde_i" field.
func (eldc *EcdsaLocalDataCreate) SetNTildeI(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetNTildeI(s)
	return eldc
}

// SetH1i sets the "h1i" field.
func (eldc *EcdsaLocalDataCreate) SetH1i(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetH1i(s)
	return eldc
}

// SetH2i sets the "h2i" field.
func (eldc *EcdsaLocalDataCreate) SetH2i(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetH2i(s)
	return eldc
}

// SetAlpha sets the "alpha" field.
func (eldc *EcdsaLocalDataCreate) SetAlpha(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetAlpha(s)
	return eldc
}

// SetBeta sets the "beta" field.
func (eldc *EcdsaLocalDataCreate) SetBeta(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetBeta(s)
	return eldc
}

// SetP sets the "p" field.
func (eldc *EcdsaLocalDataCreate) SetP(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetP(s)
	return eldc
}

// SetQ sets the "q" field.
func (eldc *EcdsaLocalDataCreate) SetQ(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetQ(s)
	return eldc
}

// SetXi sets the "xi" field.
func (eldc *EcdsaLocalDataCreate) SetXi(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetXi(s)
	return eldc
}

// SetShareID sets the "share_id" field.
func (eldc *EcdsaLocalDataCreate) SetShareID(s string) *EcdsaLocalDataCreate {
	eldc.mutation.SetShareID(s)
	return eldc
}

// SetKs sets the "ks" field.
func (eldc *EcdsaLocalDataCreate) SetKs(s []string) *EcdsaLocalDataCreate {
	eldc.mutation.SetKs(s)
	return eldc
}

// SetNTildeJ sets the "n_tilde_j" field.
func (eldc *EcdsaLocalDataCreate) SetNTildeJ(s []string) *EcdsaLocalDataCreate {
	eldc.mutation.SetNTildeJ(s)
	return eldc
}

// SetH1j sets the "h1j" field.
func (eldc *EcdsaLocalDataCreate) SetH1j(s []string) *EcdsaLocalDataCreate {
	eldc.mutation.SetH1j(s)
	return eldc
}

// SetH2j sets the "h2j" field.
func (eldc *EcdsaLocalDataCreate) SetH2j(s []string) *EcdsaLocalDataCreate {
	eldc.mutation.SetH2j(s)
	return eldc
}

// SetBigXj sets the "big_xj" field.
func (eldc *EcdsaLocalDataCreate) SetBigXj(sp []schema.ECDSAPub) *EcdsaLocalDataCreate {
	eldc.mutation.SetBigXj(sp)
	return eldc
}

// SetPaillierPks sets the "paillier_pks" field.
func (eldc *EcdsaLocalDataCreate) SetPaillierPks(s []string) *EcdsaLocalDataCreate {
	eldc.mutation.SetPaillierPks(s)
	return eldc
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (eldc *EcdsaLocalDataCreate) SetVaultID(id int) *EcdsaLocalDataCreate {
	eldc.mutation.SetVaultID(id)
	return eldc
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (eldc *EcdsaLocalDataCreate) SetNillableVaultID(id *int) *EcdsaLocalDataCreate {
	if id != nil {
		eldc = eldc.SetVaultID(*id)
	}
	return eldc
}

// SetVault sets the "vault" edge to the Vault entity.
func (eldc *EcdsaLocalDataCreate) SetVault(v *Vault) *EcdsaLocalDataCreate {
	return eldc.SetVaultID(v.ID)
}

// Mutation returns the EcdsaLocalDataMutation object of the builder.
func (eldc *EcdsaLocalDataCreate) Mutation() *EcdsaLocalDataMutation {
	return eldc.mutation
}

// Save creates the EcdsaLocalData in the database.
func (eldc *EcdsaLocalDataCreate) Save(ctx context.Context) (*EcdsaLocalData, error) {
	return withHooks(ctx, eldc.sqlSave, eldc.mutation, eldc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eldc *EcdsaLocalDataCreate) SaveX(ctx context.Context) *EcdsaLocalData {
	v, err := eldc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eldc *EcdsaLocalDataCreate) Exec(ctx context.Context) error {
	_, err := eldc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eldc *EcdsaLocalDataCreate) ExecX(ctx context.Context) {
	if err := eldc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eldc *EcdsaLocalDataCreate) check() error {
	if _, ok := eldc.mutation.NTildeI(); !ok {
		return &ValidationError{Name: "n_tilde_i", err: errors.New(`ent: missing required field "EcdsaLocalData.n_tilde_i"`)}
	}
	if v, ok := eldc.mutation.NTildeI(); ok {
		if err := ecdsalocaldata.NTildeIValidator(v); err != nil {
			return &ValidationError{Name: "n_tilde_i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.n_tilde_i": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.H1i(); !ok {
		return &ValidationError{Name: "h1i", err: errors.New(`ent: missing required field "EcdsaLocalData.h1i"`)}
	}
	if v, ok := eldc.mutation.H1i(); ok {
		if err := ecdsalocaldata.H1iValidator(v); err != nil {
			return &ValidationError{Name: "h1i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.h1i": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.H2i(); !ok {
		return &ValidationError{Name: "h2i", err: errors.New(`ent: missing required field "EcdsaLocalData.h2i"`)}
	}
	if v, ok := eldc.mutation.H2i(); ok {
		if err := ecdsalocaldata.H2iValidator(v); err != nil {
			return &ValidationError{Name: "h2i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.h2i": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.Alpha(); !ok {
		return &ValidationError{Name: "alpha", err: errors.New(`ent: missing required field "EcdsaLocalData.alpha"`)}
	}
	if v, ok := eldc.mutation.Alpha(); ok {
		if err := ecdsalocaldata.AlphaValidator(v); err != nil {
			return &ValidationError{Name: "alpha", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.alpha": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.Beta(); !ok {
		return &ValidationError{Name: "beta", err: errors.New(`ent: missing required field "EcdsaLocalData.beta"`)}
	}
	if v, ok := eldc.mutation.Beta(); ok {
		if err := ecdsalocaldata.BetaValidator(v); err != nil {
			return &ValidationError{Name: "beta", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.beta": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.P(); !ok {
		return &ValidationError{Name: "p", err: errors.New(`ent: missing required field "EcdsaLocalData.p"`)}
	}
	if v, ok := eldc.mutation.P(); ok {
		if err := ecdsalocaldata.PValidator(v); err != nil {
			return &ValidationError{Name: "p", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.p": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.Q(); !ok {
		return &ValidationError{Name: "q", err: errors.New(`ent: missing required field "EcdsaLocalData.q"`)}
	}
	if v, ok := eldc.mutation.Q(); ok {
		if err := ecdsalocaldata.QValidator(v); err != nil {
			return &ValidationError{Name: "q", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.q": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.Xi(); !ok {
		return &ValidationError{Name: "xi", err: errors.New(`ent: missing required field "EcdsaLocalData.xi"`)}
	}
	if v, ok := eldc.mutation.Xi(); ok {
		if err := ecdsalocaldata.XiValidator(v); err != nil {
			return &ValidationError{Name: "xi", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.xi": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.ShareID(); !ok {
		return &ValidationError{Name: "share_id", err: errors.New(`ent: missing required field "EcdsaLocalData.share_id"`)}
	}
	if v, ok := eldc.mutation.ShareID(); ok {
		if err := ecdsalocaldata.ShareIDValidator(v); err != nil {
			return &ValidationError{Name: "share_id", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.share_id": %w`, err)}
		}
	}
	if _, ok := eldc.mutation.Ks(); !ok {
		return &ValidationError{Name: "ks", err: errors.New(`ent: missing required field "EcdsaLocalData.ks"`)}
	}
	if _, ok := eldc.mutation.NTildeJ(); !ok {
		return &ValidationError{Name: "n_tilde_j", err: errors.New(`ent: missing required field "EcdsaLocalData.n_tilde_j"`)}
	}
	if _, ok := eldc.mutation.H1j(); !ok {
		return &ValidationError{Name: "h1j", err: errors.New(`ent: missing required field "EcdsaLocalData.h1j"`)}
	}
	if _, ok := eldc.mutation.H2j(); !ok {
		return &ValidationError{Name: "h2j", err: errors.New(`ent: missing required field "EcdsaLocalData.h2j"`)}
	}
	if _, ok := eldc.mutation.BigXj(); !ok {
		return &ValidationError{Name: "big_xj", err: errors.New(`ent: missing required field "EcdsaLocalData.big_xj"`)}
	}
	if _, ok := eldc.mutation.PaillierPks(); !ok {
		return &ValidationError{Name: "paillier_pks", err: errors.New(`ent: missing required field "EcdsaLocalData.paillier_pks"`)}
	}
	return nil
}

func (eldc *EcdsaLocalDataCreate) sqlSave(ctx context.Context) (*EcdsaLocalData, error) {
	if err := eldc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eldc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eldc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eldc.mutation.id = &_node.ID
	eldc.mutation.done = true
	return _node, nil
}

func (eldc *EcdsaLocalDataCreate) createSpec() (*EcdsaLocalData, *sqlgraph.CreateSpec) {
	var (
		_node = &EcdsaLocalData{config: eldc.config}
		_spec = sqlgraph.NewCreateSpec(ecdsalocaldata.Table, sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt))
	)
	if value, ok := eldc.mutation.NTildeI(); ok {
		_spec.SetField(ecdsalocaldata.FieldNTildeI, field.TypeString, value)
		_node.NTildeI = value
	}
	if value, ok := eldc.mutation.H1i(); ok {
		_spec.SetField(ecdsalocaldata.FieldH1i, field.TypeString, value)
		_node.H1i = value
	}
	if value, ok := eldc.mutation.H2i(); ok {
		_spec.SetField(ecdsalocaldata.FieldH2i, field.TypeString, value)
		_node.H2i = value
	}
	if value, ok := eldc.mutation.Alpha(); ok {
		_spec.SetField(ecdsalocaldata.FieldAlpha, field.TypeString, value)
		_node.Alpha = value
	}
	if value, ok := eldc.mutation.Beta(); ok {
		_spec.SetField(ecdsalocaldata.FieldBeta, field.TypeString, value)
		_node.Beta = value
	}
	if value, ok := eldc.mutation.P(); ok {
		_spec.SetField(ecdsalocaldata.FieldP, field.TypeString, value)
		_node.P = value
	}
	if value, ok := eldc.mutation.Q(); ok {
		_spec.SetField(ecdsalocaldata.FieldQ, field.TypeString, value)
		_node.Q = value
	}
	if value, ok := eldc.mutation.Xi(); ok {
		_spec.SetField(ecdsalocaldata.FieldXi, field.TypeString, value)
		_node.Xi = value
	}
	if value, ok := eldc.mutation.ShareID(); ok {
		_spec.SetField(ecdsalocaldata.FieldShareID, field.TypeString, value)
		_node.ShareID = value
	}
	if value, ok := eldc.mutation.Ks(); ok {
		_spec.SetField(ecdsalocaldata.FieldKs, field.TypeJSON, value)
		_node.Ks = value
	}
	if value, ok := eldc.mutation.NTildeJ(); ok {
		_spec.SetField(ecdsalocaldata.FieldNTildeJ, field.TypeJSON, value)
		_node.NTildeJ = value
	}
	if value, ok := eldc.mutation.H1j(); ok {
		_spec.SetField(ecdsalocaldata.FieldH1j, field.TypeJSON, value)
		_node.H1j = value
	}
	if value, ok := eldc.mutation.H2j(); ok {
		_spec.SetField(ecdsalocaldata.FieldH2j, field.TypeJSON, value)
		_node.H2j = value
	}
	if value, ok := eldc.mutation.BigXj(); ok {
		_spec.SetField(ecdsalocaldata.FieldBigXj, field.TypeJSON, value)
		_node.BigXj = value
	}
	if value, ok := eldc.mutation.PaillierPks(); ok {
		_spec.SetField(ecdsalocaldata.FieldPaillierPks, field.TypeJSON, value)
		_node.PaillierPks = value
	}
	if nodes := eldc.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ecdsalocaldata.VaultTable,
			Columns: []string{ecdsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EcdsaLocalDataCreateBulk is the builder for creating many EcdsaLocalData entities in bulk.
type EcdsaLocalDataCreateBulk struct {
	config
	err      error
	builders []*EcdsaLocalDataCreate
}

// Save creates the EcdsaLocalData entities in the database.
func (eldcb *EcdsaLocalDataCreateBulk) Save(ctx context.Context) ([]*EcdsaLocalData, error) {
	if eldcb.err != nil {
		return nil, eldcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eldcb.builders))
	nodes := make([]*EcdsaLocalData, len(eldcb.builders))
	mutators := make([]Mutator, len(eldcb.builders))
	for i := range eldcb.builders {
		func(i int, root context.Context) {
			builder := eldcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EcdsaLocalDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eldcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eldcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eldcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eldcb *EcdsaLocalDataCreateBulk) SaveX(ctx context.Context) []*EcdsaLocalData {
	v, err := eldcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eldcb *EcdsaLocalDataCreateBulk) Exec(ctx context.Context) error {
	_, err := eldcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eldcb *EcdsaLocalDataCreateBulk) ExecX(ctx context.Context) {
	if err := eldcb.Exec(ctx); err != nil {
		panic(err)
	}
}
