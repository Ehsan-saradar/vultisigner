// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"vultisigner/ent/ecdsalocaldata"
	"vultisigner/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EcdsaLocalDataDelete is the builder for deleting a EcdsaLocalData entity.
type EcdsaLocalDataDelete struct {
	config
	hooks    []Hook
	mutation *EcdsaLocalDataMutation
}

// Where appends a list predicates to the EcdsaLocalDataDelete builder.
func (eldd *EcdsaLocalDataDelete) Where(ps ...predicate.EcdsaLocalData) *EcdsaLocalDataDelete {
	eldd.mutation.Where(ps...)
	return eldd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eldd *EcdsaLocalDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eldd.sqlExec, eldd.mutation, eldd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eldd *EcdsaLocalDataDelete) ExecX(ctx context.Context) int {
	n, err := eldd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eldd *EcdsaLocalDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ecdsalocaldata.Table, sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt))
	if ps := eldd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eldd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eldd.mutation.done = true
	return affected, err
}

// EcdsaLocalDataDeleteOne is the builder for deleting a single EcdsaLocalData entity.
type EcdsaLocalDataDeleteOne struct {
	eldd *EcdsaLocalDataDelete
}

// Where appends a list predicates to the EcdsaLocalDataDelete builder.
func (elddo *EcdsaLocalDataDeleteOne) Where(ps ...predicate.EcdsaLocalData) *EcdsaLocalDataDeleteOne {
	elddo.eldd.mutation.Where(ps...)
	return elddo
}

// Exec executes the deletion query.
func (elddo *EcdsaLocalDataDeleteOne) Exec(ctx context.Context) error {
	n, err := elddo.eldd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ecdsalocaldata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (elddo *EcdsaLocalDataDeleteOne) ExecX(ctx context.Context) {
	if err := elddo.Exec(ctx); err != nil {
		panic(err)
	}
}
