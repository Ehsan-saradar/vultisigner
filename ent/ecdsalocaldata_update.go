// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/ecdsalocaldata"
	"vultisigner/ent/predicate"
	"vultisigner/ent/schema"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// EcdsaLocalDataUpdate is the builder for updating EcdsaLocalData entities.
type EcdsaLocalDataUpdate struct {
	config
	hooks    []Hook
	mutation *EcdsaLocalDataMutation
}

// Where appends a list predicates to the EcdsaLocalDataUpdate builder.
func (eldu *EcdsaLocalDataUpdate) Where(ps ...predicate.EcdsaLocalData) *EcdsaLocalDataUpdate {
	eldu.mutation.Where(ps...)
	return eldu
}

// SetNTildeI sets the "n_tilde_i" field.
func (eldu *EcdsaLocalDataUpdate) SetNTildeI(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetNTildeI(s)
	return eldu
}

// SetNillableNTildeI sets the "n_tilde_i" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableNTildeI(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetNTildeI(*s)
	}
	return eldu
}

// SetH1i sets the "h1i" field.
func (eldu *EcdsaLocalDataUpdate) SetH1i(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetH1i(s)
	return eldu
}

// SetNillableH1i sets the "h1i" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableH1i(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetH1i(*s)
	}
	return eldu
}

// SetH2i sets the "h2i" field.
func (eldu *EcdsaLocalDataUpdate) SetH2i(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetH2i(s)
	return eldu
}

// SetNillableH2i sets the "h2i" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableH2i(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetH2i(*s)
	}
	return eldu
}

// SetAlpha sets the "alpha" field.
func (eldu *EcdsaLocalDataUpdate) SetAlpha(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetAlpha(s)
	return eldu
}

// SetNillableAlpha sets the "alpha" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableAlpha(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetAlpha(*s)
	}
	return eldu
}

// SetBeta sets the "beta" field.
func (eldu *EcdsaLocalDataUpdate) SetBeta(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetBeta(s)
	return eldu
}

// SetNillableBeta sets the "beta" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableBeta(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetBeta(*s)
	}
	return eldu
}

// SetP sets the "p" field.
func (eldu *EcdsaLocalDataUpdate) SetP(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetP(s)
	return eldu
}

// SetNillableP sets the "p" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableP(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetP(*s)
	}
	return eldu
}

// SetQ sets the "q" field.
func (eldu *EcdsaLocalDataUpdate) SetQ(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetQ(s)
	return eldu
}

// SetNillableQ sets the "q" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableQ(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetQ(*s)
	}
	return eldu
}

// SetXi sets the "xi" field.
func (eldu *EcdsaLocalDataUpdate) SetXi(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetXi(s)
	return eldu
}

// SetNillableXi sets the "xi" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableXi(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetXi(*s)
	}
	return eldu
}

// SetShareID sets the "share_id" field.
func (eldu *EcdsaLocalDataUpdate) SetShareID(s string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetShareID(s)
	return eldu
}

// SetNillableShareID sets the "share_id" field if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableShareID(s *string) *EcdsaLocalDataUpdate {
	if s != nil {
		eldu.SetShareID(*s)
	}
	return eldu
}

// SetKs sets the "ks" field.
func (eldu *EcdsaLocalDataUpdate) SetKs(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetKs(s)
	return eldu
}

// AppendKs appends s to the "ks" field.
func (eldu *EcdsaLocalDataUpdate) AppendKs(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.AppendKs(s)
	return eldu
}

// SetNTildeJ sets the "n_tilde_j" field.
func (eldu *EcdsaLocalDataUpdate) SetNTildeJ(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetNTildeJ(s)
	return eldu
}

// AppendNTildeJ appends s to the "n_tilde_j" field.
func (eldu *EcdsaLocalDataUpdate) AppendNTildeJ(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.AppendNTildeJ(s)
	return eldu
}

// SetH1j sets the "h1j" field.
func (eldu *EcdsaLocalDataUpdate) SetH1j(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetH1j(s)
	return eldu
}

// AppendH1j appends s to the "h1j" field.
func (eldu *EcdsaLocalDataUpdate) AppendH1j(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.AppendH1j(s)
	return eldu
}

// SetH2j sets the "h2j" field.
func (eldu *EcdsaLocalDataUpdate) SetH2j(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetH2j(s)
	return eldu
}

// AppendH2j appends s to the "h2j" field.
func (eldu *EcdsaLocalDataUpdate) AppendH2j(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.AppendH2j(s)
	return eldu
}

// SetBigXj sets the "big_xj" field.
func (eldu *EcdsaLocalDataUpdate) SetBigXj(sp []schema.ECDSAPub) *EcdsaLocalDataUpdate {
	eldu.mutation.SetBigXj(sp)
	return eldu
}

// AppendBigXj appends sp to the "big_xj" field.
func (eldu *EcdsaLocalDataUpdate) AppendBigXj(sp []schema.ECDSAPub) *EcdsaLocalDataUpdate {
	eldu.mutation.AppendBigXj(sp)
	return eldu
}

// SetPaillierPks sets the "paillier_pks" field.
func (eldu *EcdsaLocalDataUpdate) SetPaillierPks(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.SetPaillierPks(s)
	return eldu
}

// AppendPaillierPks appends s to the "paillier_pks" field.
func (eldu *EcdsaLocalDataUpdate) AppendPaillierPks(s []string) *EcdsaLocalDataUpdate {
	eldu.mutation.AppendPaillierPks(s)
	return eldu
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (eldu *EcdsaLocalDataUpdate) SetVaultID(id int) *EcdsaLocalDataUpdate {
	eldu.mutation.SetVaultID(id)
	return eldu
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (eldu *EcdsaLocalDataUpdate) SetNillableVaultID(id *int) *EcdsaLocalDataUpdate {
	if id != nil {
		eldu = eldu.SetVaultID(*id)
	}
	return eldu
}

// SetVault sets the "vault" edge to the Vault entity.
func (eldu *EcdsaLocalDataUpdate) SetVault(v *Vault) *EcdsaLocalDataUpdate {
	return eldu.SetVaultID(v.ID)
}

// Mutation returns the EcdsaLocalDataMutation object of the builder.
func (eldu *EcdsaLocalDataUpdate) Mutation() *EcdsaLocalDataMutation {
	return eldu.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (eldu *EcdsaLocalDataUpdate) ClearVault() *EcdsaLocalDataUpdate {
	eldu.mutation.ClearVault()
	return eldu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eldu *EcdsaLocalDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eldu.sqlSave, eldu.mutation, eldu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eldu *EcdsaLocalDataUpdate) SaveX(ctx context.Context) int {
	affected, err := eldu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eldu *EcdsaLocalDataUpdate) Exec(ctx context.Context) error {
	_, err := eldu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eldu *EcdsaLocalDataUpdate) ExecX(ctx context.Context) {
	if err := eldu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eldu *EcdsaLocalDataUpdate) check() error {
	if v, ok := eldu.mutation.NTildeI(); ok {
		if err := ecdsalocaldata.NTildeIValidator(v); err != nil {
			return &ValidationError{Name: "n_tilde_i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.n_tilde_i": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.H1i(); ok {
		if err := ecdsalocaldata.H1iValidator(v); err != nil {
			return &ValidationError{Name: "h1i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.h1i": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.H2i(); ok {
		if err := ecdsalocaldata.H2iValidator(v); err != nil {
			return &ValidationError{Name: "h2i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.h2i": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.Alpha(); ok {
		if err := ecdsalocaldata.AlphaValidator(v); err != nil {
			return &ValidationError{Name: "alpha", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.alpha": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.Beta(); ok {
		if err := ecdsalocaldata.BetaValidator(v); err != nil {
			return &ValidationError{Name: "beta", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.beta": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.P(); ok {
		if err := ecdsalocaldata.PValidator(v); err != nil {
			return &ValidationError{Name: "p", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.p": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.Q(); ok {
		if err := ecdsalocaldata.QValidator(v); err != nil {
			return &ValidationError{Name: "q", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.q": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.Xi(); ok {
		if err := ecdsalocaldata.XiValidator(v); err != nil {
			return &ValidationError{Name: "xi", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.xi": %w`, err)}
		}
	}
	if v, ok := eldu.mutation.ShareID(); ok {
		if err := ecdsalocaldata.ShareIDValidator(v); err != nil {
			return &ValidationError{Name: "share_id", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.share_id": %w`, err)}
		}
	}
	return nil
}

func (eldu *EcdsaLocalDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eldu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ecdsalocaldata.Table, ecdsalocaldata.Columns, sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt))
	if ps := eldu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eldu.mutation.NTildeI(); ok {
		_spec.SetField(ecdsalocaldata.FieldNTildeI, field.TypeString, value)
	}
	if value, ok := eldu.mutation.H1i(); ok {
		_spec.SetField(ecdsalocaldata.FieldH1i, field.TypeString, value)
	}
	if value, ok := eldu.mutation.H2i(); ok {
		_spec.SetField(ecdsalocaldata.FieldH2i, field.TypeString, value)
	}
	if value, ok := eldu.mutation.Alpha(); ok {
		_spec.SetField(ecdsalocaldata.FieldAlpha, field.TypeString, value)
	}
	if value, ok := eldu.mutation.Beta(); ok {
		_spec.SetField(ecdsalocaldata.FieldBeta, field.TypeString, value)
	}
	if value, ok := eldu.mutation.P(); ok {
		_spec.SetField(ecdsalocaldata.FieldP, field.TypeString, value)
	}
	if value, ok := eldu.mutation.Q(); ok {
		_spec.SetField(ecdsalocaldata.FieldQ, field.TypeString, value)
	}
	if value, ok := eldu.mutation.Xi(); ok {
		_spec.SetField(ecdsalocaldata.FieldXi, field.TypeString, value)
	}
	if value, ok := eldu.mutation.ShareID(); ok {
		_spec.SetField(ecdsalocaldata.FieldShareID, field.TypeString, value)
	}
	if value, ok := eldu.mutation.Ks(); ok {
		_spec.SetField(ecdsalocaldata.FieldKs, field.TypeJSON, value)
	}
	if value, ok := eldu.mutation.AppendedKs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldKs, value)
		})
	}
	if value, ok := eldu.mutation.NTildeJ(); ok {
		_spec.SetField(ecdsalocaldata.FieldNTildeJ, field.TypeJSON, value)
	}
	if value, ok := eldu.mutation.AppendedNTildeJ(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldNTildeJ, value)
		})
	}
	if value, ok := eldu.mutation.H1j(); ok {
		_spec.SetField(ecdsalocaldata.FieldH1j, field.TypeJSON, value)
	}
	if value, ok := eldu.mutation.AppendedH1j(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldH1j, value)
		})
	}
	if value, ok := eldu.mutation.H2j(); ok {
		_spec.SetField(ecdsalocaldata.FieldH2j, field.TypeJSON, value)
	}
	if value, ok := eldu.mutation.AppendedH2j(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldH2j, value)
		})
	}
	if value, ok := eldu.mutation.BigXj(); ok {
		_spec.SetField(ecdsalocaldata.FieldBigXj, field.TypeJSON, value)
	}
	if value, ok := eldu.mutation.AppendedBigXj(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldBigXj, value)
		})
	}
	if value, ok := eldu.mutation.PaillierPks(); ok {
		_spec.SetField(ecdsalocaldata.FieldPaillierPks, field.TypeJSON, value)
	}
	if value, ok := eldu.mutation.AppendedPaillierPks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldPaillierPks, value)
		})
	}
	if eldu.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ecdsalocaldata.VaultTable,
			Columns: []string{ecdsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eldu.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ecdsalocaldata.VaultTable,
			Columns: []string{ecdsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eldu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ecdsalocaldata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eldu.mutation.done = true
	return n, nil
}

// EcdsaLocalDataUpdateOne is the builder for updating a single EcdsaLocalData entity.
type EcdsaLocalDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EcdsaLocalDataMutation
}

// SetNTildeI sets the "n_tilde_i" field.
func (elduo *EcdsaLocalDataUpdateOne) SetNTildeI(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetNTildeI(s)
	return elduo
}

// SetNillableNTildeI sets the "n_tilde_i" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableNTildeI(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetNTildeI(*s)
	}
	return elduo
}

// SetH1i sets the "h1i" field.
func (elduo *EcdsaLocalDataUpdateOne) SetH1i(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetH1i(s)
	return elduo
}

// SetNillableH1i sets the "h1i" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableH1i(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetH1i(*s)
	}
	return elduo
}

// SetH2i sets the "h2i" field.
func (elduo *EcdsaLocalDataUpdateOne) SetH2i(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetH2i(s)
	return elduo
}

// SetNillableH2i sets the "h2i" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableH2i(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetH2i(*s)
	}
	return elduo
}

// SetAlpha sets the "alpha" field.
func (elduo *EcdsaLocalDataUpdateOne) SetAlpha(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetAlpha(s)
	return elduo
}

// SetNillableAlpha sets the "alpha" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableAlpha(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetAlpha(*s)
	}
	return elduo
}

// SetBeta sets the "beta" field.
func (elduo *EcdsaLocalDataUpdateOne) SetBeta(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetBeta(s)
	return elduo
}

// SetNillableBeta sets the "beta" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableBeta(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetBeta(*s)
	}
	return elduo
}

// SetP sets the "p" field.
func (elduo *EcdsaLocalDataUpdateOne) SetP(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetP(s)
	return elduo
}

// SetNillableP sets the "p" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableP(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetP(*s)
	}
	return elduo
}

// SetQ sets the "q" field.
func (elduo *EcdsaLocalDataUpdateOne) SetQ(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetQ(s)
	return elduo
}

// SetNillableQ sets the "q" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableQ(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetQ(*s)
	}
	return elduo
}

// SetXi sets the "xi" field.
func (elduo *EcdsaLocalDataUpdateOne) SetXi(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetXi(s)
	return elduo
}

// SetNillableXi sets the "xi" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableXi(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetXi(*s)
	}
	return elduo
}

// SetShareID sets the "share_id" field.
func (elduo *EcdsaLocalDataUpdateOne) SetShareID(s string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetShareID(s)
	return elduo
}

// SetNillableShareID sets the "share_id" field if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableShareID(s *string) *EcdsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetShareID(*s)
	}
	return elduo
}

// SetKs sets the "ks" field.
func (elduo *EcdsaLocalDataUpdateOne) SetKs(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetKs(s)
	return elduo
}

// AppendKs appends s to the "ks" field.
func (elduo *EcdsaLocalDataUpdateOne) AppendKs(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.AppendKs(s)
	return elduo
}

// SetNTildeJ sets the "n_tilde_j" field.
func (elduo *EcdsaLocalDataUpdateOne) SetNTildeJ(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetNTildeJ(s)
	return elduo
}

// AppendNTildeJ appends s to the "n_tilde_j" field.
func (elduo *EcdsaLocalDataUpdateOne) AppendNTildeJ(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.AppendNTildeJ(s)
	return elduo
}

// SetH1j sets the "h1j" field.
func (elduo *EcdsaLocalDataUpdateOne) SetH1j(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetH1j(s)
	return elduo
}

// AppendH1j appends s to the "h1j" field.
func (elduo *EcdsaLocalDataUpdateOne) AppendH1j(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.AppendH1j(s)
	return elduo
}

// SetH2j sets the "h2j" field.
func (elduo *EcdsaLocalDataUpdateOne) SetH2j(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetH2j(s)
	return elduo
}

// AppendH2j appends s to the "h2j" field.
func (elduo *EcdsaLocalDataUpdateOne) AppendH2j(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.AppendH2j(s)
	return elduo
}

// SetBigXj sets the "big_xj" field.
func (elduo *EcdsaLocalDataUpdateOne) SetBigXj(sp []schema.ECDSAPub) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetBigXj(sp)
	return elduo
}

// AppendBigXj appends sp to the "big_xj" field.
func (elduo *EcdsaLocalDataUpdateOne) AppendBigXj(sp []schema.ECDSAPub) *EcdsaLocalDataUpdateOne {
	elduo.mutation.AppendBigXj(sp)
	return elduo
}

// SetPaillierPks sets the "paillier_pks" field.
func (elduo *EcdsaLocalDataUpdateOne) SetPaillierPks(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetPaillierPks(s)
	return elduo
}

// AppendPaillierPks appends s to the "paillier_pks" field.
func (elduo *EcdsaLocalDataUpdateOne) AppendPaillierPks(s []string) *EcdsaLocalDataUpdateOne {
	elduo.mutation.AppendPaillierPks(s)
	return elduo
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (elduo *EcdsaLocalDataUpdateOne) SetVaultID(id int) *EcdsaLocalDataUpdateOne {
	elduo.mutation.SetVaultID(id)
	return elduo
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (elduo *EcdsaLocalDataUpdateOne) SetNillableVaultID(id *int) *EcdsaLocalDataUpdateOne {
	if id != nil {
		elduo = elduo.SetVaultID(*id)
	}
	return elduo
}

// SetVault sets the "vault" edge to the Vault entity.
func (elduo *EcdsaLocalDataUpdateOne) SetVault(v *Vault) *EcdsaLocalDataUpdateOne {
	return elduo.SetVaultID(v.ID)
}

// Mutation returns the EcdsaLocalDataMutation object of the builder.
func (elduo *EcdsaLocalDataUpdateOne) Mutation() *EcdsaLocalDataMutation {
	return elduo.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (elduo *EcdsaLocalDataUpdateOne) ClearVault() *EcdsaLocalDataUpdateOne {
	elduo.mutation.ClearVault()
	return elduo
}

// Where appends a list predicates to the EcdsaLocalDataUpdate builder.
func (elduo *EcdsaLocalDataUpdateOne) Where(ps ...predicate.EcdsaLocalData) *EcdsaLocalDataUpdateOne {
	elduo.mutation.Where(ps...)
	return elduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (elduo *EcdsaLocalDataUpdateOne) Select(field string, fields ...string) *EcdsaLocalDataUpdateOne {
	elduo.fields = append([]string{field}, fields...)
	return elduo
}

// Save executes the query and returns the updated EcdsaLocalData entity.
func (elduo *EcdsaLocalDataUpdateOne) Save(ctx context.Context) (*EcdsaLocalData, error) {
	return withHooks(ctx, elduo.sqlSave, elduo.mutation, elduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elduo *EcdsaLocalDataUpdateOne) SaveX(ctx context.Context) *EcdsaLocalData {
	node, err := elduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (elduo *EcdsaLocalDataUpdateOne) Exec(ctx context.Context) error {
	_, err := elduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elduo *EcdsaLocalDataUpdateOne) ExecX(ctx context.Context) {
	if err := elduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elduo *EcdsaLocalDataUpdateOne) check() error {
	if v, ok := elduo.mutation.NTildeI(); ok {
		if err := ecdsalocaldata.NTildeIValidator(v); err != nil {
			return &ValidationError{Name: "n_tilde_i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.n_tilde_i": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.H1i(); ok {
		if err := ecdsalocaldata.H1iValidator(v); err != nil {
			return &ValidationError{Name: "h1i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.h1i": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.H2i(); ok {
		if err := ecdsalocaldata.H2iValidator(v); err != nil {
			return &ValidationError{Name: "h2i", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.h2i": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.Alpha(); ok {
		if err := ecdsalocaldata.AlphaValidator(v); err != nil {
			return &ValidationError{Name: "alpha", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.alpha": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.Beta(); ok {
		if err := ecdsalocaldata.BetaValidator(v); err != nil {
			return &ValidationError{Name: "beta", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.beta": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.P(); ok {
		if err := ecdsalocaldata.PValidator(v); err != nil {
			return &ValidationError{Name: "p", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.p": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.Q(); ok {
		if err := ecdsalocaldata.QValidator(v); err != nil {
			return &ValidationError{Name: "q", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.q": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.Xi(); ok {
		if err := ecdsalocaldata.XiValidator(v); err != nil {
			return &ValidationError{Name: "xi", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.xi": %w`, err)}
		}
	}
	if v, ok := elduo.mutation.ShareID(); ok {
		if err := ecdsalocaldata.ShareIDValidator(v); err != nil {
			return &ValidationError{Name: "share_id", err: fmt.Errorf(`ent: validator failed for field "EcdsaLocalData.share_id": %w`, err)}
		}
	}
	return nil
}

func (elduo *EcdsaLocalDataUpdateOne) sqlSave(ctx context.Context) (_node *EcdsaLocalData, err error) {
	if err := elduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ecdsalocaldata.Table, ecdsalocaldata.Columns, sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt))
	id, ok := elduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EcdsaLocalData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := elduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ecdsalocaldata.FieldID)
		for _, f := range fields {
			if !ecdsalocaldata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ecdsalocaldata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := elduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elduo.mutation.NTildeI(); ok {
		_spec.SetField(ecdsalocaldata.FieldNTildeI, field.TypeString, value)
	}
	if value, ok := elduo.mutation.H1i(); ok {
		_spec.SetField(ecdsalocaldata.FieldH1i, field.TypeString, value)
	}
	if value, ok := elduo.mutation.H2i(); ok {
		_spec.SetField(ecdsalocaldata.FieldH2i, field.TypeString, value)
	}
	if value, ok := elduo.mutation.Alpha(); ok {
		_spec.SetField(ecdsalocaldata.FieldAlpha, field.TypeString, value)
	}
	if value, ok := elduo.mutation.Beta(); ok {
		_spec.SetField(ecdsalocaldata.FieldBeta, field.TypeString, value)
	}
	if value, ok := elduo.mutation.P(); ok {
		_spec.SetField(ecdsalocaldata.FieldP, field.TypeString, value)
	}
	if value, ok := elduo.mutation.Q(); ok {
		_spec.SetField(ecdsalocaldata.FieldQ, field.TypeString, value)
	}
	if value, ok := elduo.mutation.Xi(); ok {
		_spec.SetField(ecdsalocaldata.FieldXi, field.TypeString, value)
	}
	if value, ok := elduo.mutation.ShareID(); ok {
		_spec.SetField(ecdsalocaldata.FieldShareID, field.TypeString, value)
	}
	if value, ok := elduo.mutation.Ks(); ok {
		_spec.SetField(ecdsalocaldata.FieldKs, field.TypeJSON, value)
	}
	if value, ok := elduo.mutation.AppendedKs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldKs, value)
		})
	}
	if value, ok := elduo.mutation.NTildeJ(); ok {
		_spec.SetField(ecdsalocaldata.FieldNTildeJ, field.TypeJSON, value)
	}
	if value, ok := elduo.mutation.AppendedNTildeJ(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldNTildeJ, value)
		})
	}
	if value, ok := elduo.mutation.H1j(); ok {
		_spec.SetField(ecdsalocaldata.FieldH1j, field.TypeJSON, value)
	}
	if value, ok := elduo.mutation.AppendedH1j(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldH1j, value)
		})
	}
	if value, ok := elduo.mutation.H2j(); ok {
		_spec.SetField(ecdsalocaldata.FieldH2j, field.TypeJSON, value)
	}
	if value, ok := elduo.mutation.AppendedH2j(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldH2j, value)
		})
	}
	if value, ok := elduo.mutation.BigXj(); ok {
		_spec.SetField(ecdsalocaldata.FieldBigXj, field.TypeJSON, value)
	}
	if value, ok := elduo.mutation.AppendedBigXj(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldBigXj, value)
		})
	}
	if value, ok := elduo.mutation.PaillierPks(); ok {
		_spec.SetField(ecdsalocaldata.FieldPaillierPks, field.TypeJSON, value)
	}
	if value, ok := elduo.mutation.AppendedPaillierPks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsalocaldata.FieldPaillierPks, value)
		})
	}
	if elduo.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ecdsalocaldata.VaultTable,
			Columns: []string{ecdsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elduo.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ecdsalocaldata.VaultTable,
			Columns: []string{ecdsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EcdsaLocalData{config: elduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, elduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ecdsalocaldata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	elduo.mutation.done = true
	return _node, nil
}
