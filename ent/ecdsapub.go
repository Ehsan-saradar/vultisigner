// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"vultisigner/ent/ecdsapub"
	"vultisigner/ent/vault"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ECDSAPub is the model entity for the ECDSAPub schema.
type ECDSAPub struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Curve holds the value of the "curve" field.
	Curve string `json:"curve,omitempty"`
	// Coords holds the value of the "coords" field.
	Coords []string `json:"coords,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ECDSAPubQuery when eager-loading is set.
	Edges           ECDSAPubEdges `json:"edges"`
	ecdsa_pub_vault *int
	selectValues    sql.SelectValues
}

// ECDSAPubEdges holds the relations/edges for other nodes in the graph.
type ECDSAPubEdges struct {
	// Vault holds the value of the vault edge.
	Vault *Vault `json:"vault,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VaultOrErr returns the Vault value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ECDSAPubEdges) VaultOrErr() (*Vault, error) {
	if e.Vault != nil {
		return e.Vault, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vault.Label}
	}
	return nil, &NotLoadedError{edge: "vault"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ECDSAPub) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ecdsapub.FieldCoords:
			values[i] = new([]byte)
		case ecdsapub.FieldID:
			values[i] = new(sql.NullInt64)
		case ecdsapub.FieldCurve:
			values[i] = new(sql.NullString)
		case ecdsapub.ForeignKeys[0]: // ecdsa_pub_vault
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ECDSAPub fields.
func (ep *ECDSAPub) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ecdsapub.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ep.ID = int(value.Int64)
		case ecdsapub.FieldCurve:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field curve", values[i])
			} else if value.Valid {
				ep.Curve = value.String
			}
		case ecdsapub.FieldCoords:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field coords", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ep.Coords); err != nil {
					return fmt.Errorf("unmarshal field coords: %w", err)
				}
			}
		case ecdsapub.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ecdsa_pub_vault", value)
			} else if value.Valid {
				ep.ecdsa_pub_vault = new(int)
				*ep.ecdsa_pub_vault = int(value.Int64)
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ECDSAPub.
// This includes values selected through modifiers, order, etc.
func (ep *ECDSAPub) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryVault queries the "vault" edge of the ECDSAPub entity.
func (ep *ECDSAPub) QueryVault() *VaultQuery {
	return NewECDSAPubClient(ep.config).QueryVault(ep)
}

// Update returns a builder for updating this ECDSAPub.
// Note that you need to call ECDSAPub.Unwrap() before calling this method if this ECDSAPub
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *ECDSAPub) Update() *ECDSAPubUpdateOne {
	return NewECDSAPubClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the ECDSAPub entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *ECDSAPub) Unwrap() *ECDSAPub {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: ECDSAPub is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *ECDSAPub) String() string {
	var builder strings.Builder
	builder.WriteString("ECDSAPub(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("curve=")
	builder.WriteString(ep.Curve)
	builder.WriteString(", ")
	builder.WriteString("coords=")
	builder.WriteString(fmt.Sprintf("%v", ep.Coords))
	builder.WriteByte(')')
	return builder.String()
}

// ECDSAPubs is a parsable slice of ECDSAPub.
type ECDSAPubs []*ECDSAPub
