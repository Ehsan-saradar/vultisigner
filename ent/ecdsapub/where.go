// Code generated by ent, DO NOT EDIT.

package ecdsapub

import (
	"vultisigner/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldLTE(FieldID, id))
}

// Curve applies equality check predicate on the "curve" field. It's identical to CurveEQ.
func Curve(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldEQ(FieldCurve, v))
}

// CurveEQ applies the EQ predicate on the "curve" field.
func CurveEQ(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldEQ(FieldCurve, v))
}

// CurveNEQ applies the NEQ predicate on the "curve" field.
func CurveNEQ(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldNEQ(FieldCurve, v))
}

// CurveIn applies the In predicate on the "curve" field.
func CurveIn(vs ...string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldIn(FieldCurve, vs...))
}

// CurveNotIn applies the NotIn predicate on the "curve" field.
func CurveNotIn(vs ...string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldNotIn(FieldCurve, vs...))
}

// CurveGT applies the GT predicate on the "curve" field.
func CurveGT(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldGT(FieldCurve, v))
}

// CurveGTE applies the GTE predicate on the "curve" field.
func CurveGTE(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldGTE(FieldCurve, v))
}

// CurveLT applies the LT predicate on the "curve" field.
func CurveLT(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldLT(FieldCurve, v))
}

// CurveLTE applies the LTE predicate on the "curve" field.
func CurveLTE(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldLTE(FieldCurve, v))
}

// CurveContains applies the Contains predicate on the "curve" field.
func CurveContains(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldContains(FieldCurve, v))
}

// CurveHasPrefix applies the HasPrefix predicate on the "curve" field.
func CurveHasPrefix(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldHasPrefix(FieldCurve, v))
}

// CurveHasSuffix applies the HasSuffix predicate on the "curve" field.
func CurveHasSuffix(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldHasSuffix(FieldCurve, v))
}

// CurveEqualFold applies the EqualFold predicate on the "curve" field.
func CurveEqualFold(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldEqualFold(FieldCurve, v))
}

// CurveContainsFold applies the ContainsFold predicate on the "curve" field.
func CurveContainsFold(v string) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.FieldContainsFold(FieldCurve, v))
}

// HasVault applies the HasEdge predicate on the "vault" edge.
func HasVault() predicate.ECDSAPub {
	return predicate.ECDSAPub(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VaultTable, VaultColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVaultWith applies the HasEdge predicate on the "vault" edge with a given conditions (other predicates).
func HasVaultWith(preds ...predicate.Vault) predicate.ECDSAPub {
	return predicate.ECDSAPub(func(s *sql.Selector) {
		step := newVaultStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ECDSAPub) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ECDSAPub) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ECDSAPub) predicate.ECDSAPub {
	return predicate.ECDSAPub(sql.NotPredicates(p))
}
