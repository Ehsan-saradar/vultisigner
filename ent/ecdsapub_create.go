// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/ecdsapub"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ECDSAPubCreate is the builder for creating a ECDSAPub entity.
type ECDSAPubCreate struct {
	config
	mutation *ECDSAPubMutation
	hooks    []Hook
}

// SetCurve sets the "curve" field.
func (epc *ECDSAPubCreate) SetCurve(s string) *ECDSAPubCreate {
	epc.mutation.SetCurve(s)
	return epc
}

// SetCoords sets the "coords" field.
func (epc *ECDSAPubCreate) SetCoords(s []string) *ECDSAPubCreate {
	epc.mutation.SetCoords(s)
	return epc
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (epc *ECDSAPubCreate) SetVaultID(id int) *ECDSAPubCreate {
	epc.mutation.SetVaultID(id)
	return epc
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (epc *ECDSAPubCreate) SetNillableVaultID(id *int) *ECDSAPubCreate {
	if id != nil {
		epc = epc.SetVaultID(*id)
	}
	return epc
}

// SetVault sets the "vault" edge to the Vault entity.
func (epc *ECDSAPubCreate) SetVault(v *Vault) *ECDSAPubCreate {
	return epc.SetVaultID(v.ID)
}

// Mutation returns the ECDSAPubMutation object of the builder.
func (epc *ECDSAPubCreate) Mutation() *ECDSAPubMutation {
	return epc.mutation
}

// Save creates the ECDSAPub in the database.
func (epc *ECDSAPubCreate) Save(ctx context.Context) (*ECDSAPub, error) {
	return withHooks(ctx, epc.sqlSave, epc.mutation, epc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epc *ECDSAPubCreate) SaveX(ctx context.Context) *ECDSAPub {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *ECDSAPubCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *ECDSAPubCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epc *ECDSAPubCreate) check() error {
	if _, ok := epc.mutation.Curve(); !ok {
		return &ValidationError{Name: "curve", err: errors.New(`ent: missing required field "ECDSAPub.curve"`)}
	}
	if v, ok := epc.mutation.Curve(); ok {
		if err := ecdsapub.CurveValidator(v); err != nil {
			return &ValidationError{Name: "curve", err: fmt.Errorf(`ent: validator failed for field "ECDSAPub.curve": %w`, err)}
		}
	}
	if _, ok := epc.mutation.Coords(); !ok {
		return &ValidationError{Name: "coords", err: errors.New(`ent: missing required field "ECDSAPub.coords"`)}
	}
	return nil
}

func (epc *ECDSAPubCreate) sqlSave(ctx context.Context) (*ECDSAPub, error) {
	if err := epc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	epc.mutation.id = &_node.ID
	epc.mutation.done = true
	return _node, nil
}

func (epc *ECDSAPubCreate) createSpec() (*ECDSAPub, *sqlgraph.CreateSpec) {
	var (
		_node = &ECDSAPub{config: epc.config}
		_spec = sqlgraph.NewCreateSpec(ecdsapub.Table, sqlgraph.NewFieldSpec(ecdsapub.FieldID, field.TypeInt))
	)
	if value, ok := epc.mutation.Curve(); ok {
		_spec.SetField(ecdsapub.FieldCurve, field.TypeString, value)
		_node.Curve = value
	}
	if value, ok := epc.mutation.Coords(); ok {
		_spec.SetField(ecdsapub.FieldCoords, field.TypeJSON, value)
		_node.Coords = value
	}
	if nodes := epc.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ecdsapub.VaultTable,
			Columns: []string{ecdsapub.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ecdsa_pub_vault = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ECDSAPubCreateBulk is the builder for creating many ECDSAPub entities in bulk.
type ECDSAPubCreateBulk struct {
	config
	err      error
	builders []*ECDSAPubCreate
}

// Save creates the ECDSAPub entities in the database.
func (epcb *ECDSAPubCreateBulk) Save(ctx context.Context) ([]*ECDSAPub, error) {
	if epcb.err != nil {
		return nil, epcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*ECDSAPub, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ECDSAPubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *ECDSAPubCreateBulk) SaveX(ctx context.Context) []*ECDSAPub {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *ECDSAPubCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *ECDSAPubCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}
