// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/ecdsapub"
	"vultisigner/ent/predicate"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ECDSAPubUpdate is the builder for updating ECDSAPub entities.
type ECDSAPubUpdate struct {
	config
	hooks    []Hook
	mutation *ECDSAPubMutation
}

// Where appends a list predicates to the ECDSAPubUpdate builder.
func (epu *ECDSAPubUpdate) Where(ps ...predicate.ECDSAPub) *ECDSAPubUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetCurve sets the "curve" field.
func (epu *ECDSAPubUpdate) SetCurve(s string) *ECDSAPubUpdate {
	epu.mutation.SetCurve(s)
	return epu
}

// SetNillableCurve sets the "curve" field if the given value is not nil.
func (epu *ECDSAPubUpdate) SetNillableCurve(s *string) *ECDSAPubUpdate {
	if s != nil {
		epu.SetCurve(*s)
	}
	return epu
}

// SetCoords sets the "coords" field.
func (epu *ECDSAPubUpdate) SetCoords(s []string) *ECDSAPubUpdate {
	epu.mutation.SetCoords(s)
	return epu
}

// AppendCoords appends s to the "coords" field.
func (epu *ECDSAPubUpdate) AppendCoords(s []string) *ECDSAPubUpdate {
	epu.mutation.AppendCoords(s)
	return epu
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (epu *ECDSAPubUpdate) SetVaultID(id int) *ECDSAPubUpdate {
	epu.mutation.SetVaultID(id)
	return epu
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (epu *ECDSAPubUpdate) SetNillableVaultID(id *int) *ECDSAPubUpdate {
	if id != nil {
		epu = epu.SetVaultID(*id)
	}
	return epu
}

// SetVault sets the "vault" edge to the Vault entity.
func (epu *ECDSAPubUpdate) SetVault(v *Vault) *ECDSAPubUpdate {
	return epu.SetVaultID(v.ID)
}

// Mutation returns the ECDSAPubMutation object of the builder.
func (epu *ECDSAPubUpdate) Mutation() *ECDSAPubMutation {
	return epu.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (epu *ECDSAPubUpdate) ClearVault() *ECDSAPubUpdate {
	epu.mutation.ClearVault()
	return epu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *ECDSAPubUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *ECDSAPubUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *ECDSAPubUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *ECDSAPubUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epu *ECDSAPubUpdate) check() error {
	if v, ok := epu.mutation.Curve(); ok {
		if err := ecdsapub.CurveValidator(v); err != nil {
			return &ValidationError{Name: "curve", err: fmt.Errorf(`ent: validator failed for field "ECDSAPub.curve": %w`, err)}
		}
	}
	return nil
}

func (epu *ECDSAPubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ecdsapub.Table, ecdsapub.Columns, sqlgraph.NewFieldSpec(ecdsapub.FieldID, field.TypeInt))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.Curve(); ok {
		_spec.SetField(ecdsapub.FieldCurve, field.TypeString, value)
	}
	if value, ok := epu.mutation.Coords(); ok {
		_spec.SetField(ecdsapub.FieldCoords, field.TypeJSON, value)
	}
	if value, ok := epu.mutation.AppendedCoords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsapub.FieldCoords, value)
		})
	}
	if epu.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ecdsapub.VaultTable,
			Columns: []string{ecdsapub.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ecdsapub.VaultTable,
			Columns: []string{ecdsapub.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ecdsapub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// ECDSAPubUpdateOne is the builder for updating a single ECDSAPub entity.
type ECDSAPubUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ECDSAPubMutation
}

// SetCurve sets the "curve" field.
func (epuo *ECDSAPubUpdateOne) SetCurve(s string) *ECDSAPubUpdateOne {
	epuo.mutation.SetCurve(s)
	return epuo
}

// SetNillableCurve sets the "curve" field if the given value is not nil.
func (epuo *ECDSAPubUpdateOne) SetNillableCurve(s *string) *ECDSAPubUpdateOne {
	if s != nil {
		epuo.SetCurve(*s)
	}
	return epuo
}

// SetCoords sets the "coords" field.
func (epuo *ECDSAPubUpdateOne) SetCoords(s []string) *ECDSAPubUpdateOne {
	epuo.mutation.SetCoords(s)
	return epuo
}

// AppendCoords appends s to the "coords" field.
func (epuo *ECDSAPubUpdateOne) AppendCoords(s []string) *ECDSAPubUpdateOne {
	epuo.mutation.AppendCoords(s)
	return epuo
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (epuo *ECDSAPubUpdateOne) SetVaultID(id int) *ECDSAPubUpdateOne {
	epuo.mutation.SetVaultID(id)
	return epuo
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (epuo *ECDSAPubUpdateOne) SetNillableVaultID(id *int) *ECDSAPubUpdateOne {
	if id != nil {
		epuo = epuo.SetVaultID(*id)
	}
	return epuo
}

// SetVault sets the "vault" edge to the Vault entity.
func (epuo *ECDSAPubUpdateOne) SetVault(v *Vault) *ECDSAPubUpdateOne {
	return epuo.SetVaultID(v.ID)
}

// Mutation returns the ECDSAPubMutation object of the builder.
func (epuo *ECDSAPubUpdateOne) Mutation() *ECDSAPubMutation {
	return epuo.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (epuo *ECDSAPubUpdateOne) ClearVault() *ECDSAPubUpdateOne {
	epuo.mutation.ClearVault()
	return epuo
}

// Where appends a list predicates to the ECDSAPubUpdate builder.
func (epuo *ECDSAPubUpdateOne) Where(ps ...predicate.ECDSAPub) *ECDSAPubUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *ECDSAPubUpdateOne) Select(field string, fields ...string) *ECDSAPubUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated ECDSAPub entity.
func (epuo *ECDSAPubUpdateOne) Save(ctx context.Context) (*ECDSAPub, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *ECDSAPubUpdateOne) SaveX(ctx context.Context) *ECDSAPub {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *ECDSAPubUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *ECDSAPubUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epuo *ECDSAPubUpdateOne) check() error {
	if v, ok := epuo.mutation.Curve(); ok {
		if err := ecdsapub.CurveValidator(v); err != nil {
			return &ValidationError{Name: "curve", err: fmt.Errorf(`ent: validator failed for field "ECDSAPub.curve": %w`, err)}
		}
	}
	return nil
}

func (epuo *ECDSAPubUpdateOne) sqlSave(ctx context.Context) (_node *ECDSAPub, err error) {
	if err := epuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ecdsapub.Table, ecdsapub.Columns, sqlgraph.NewFieldSpec(ecdsapub.FieldID, field.TypeInt))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ECDSAPub.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ecdsapub.FieldID)
		for _, f := range fields {
			if !ecdsapub.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ecdsapub.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.Curve(); ok {
		_spec.SetField(ecdsapub.FieldCurve, field.TypeString, value)
	}
	if value, ok := epuo.mutation.Coords(); ok {
		_spec.SetField(ecdsapub.FieldCoords, field.TypeJSON, value)
	}
	if value, ok := epuo.mutation.AppendedCoords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ecdsapub.FieldCoords, value)
		})
	}
	if epuo.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ecdsapub.VaultTable,
			Columns: []string{ecdsapub.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ecdsapub.VaultTable,
			Columns: []string{ecdsapub.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ECDSAPub{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ecdsapub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
