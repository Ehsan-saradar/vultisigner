// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"vultisigner/ent/eddsalocaldata"
	"vultisigner/ent/vault"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EddsaLocalData is the model entity for the EddsaLocalData schema.
type EddsaLocalData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Xi holds the value of the "xi" field.
	Xi string `json:"xi,omitempty"`
	// ShareID holds the value of the "share_id" field.
	ShareID string `json:"share_id,omitempty"`
	// Ks holds the value of the "ks" field.
	Ks string `json:"ks,omitempty"`
	// BigXj holds the value of the "big_xj" field.
	BigXj string `json:"big_xj,omitempty"`
	// EddsaPub holds the value of the "eddsa_pub" field.
	EddsaPub string `json:"eddsa_pub,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EddsaLocalDataQuery when eager-loading is set.
	Edges        EddsaLocalDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EddsaLocalDataEdges holds the relations/edges for other nodes in the graph.
type EddsaLocalDataEdges struct {
	// Vault holds the value of the vault edge.
	Vault *Vault `json:"vault,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VaultOrErr returns the Vault value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EddsaLocalDataEdges) VaultOrErr() (*Vault, error) {
	if e.Vault != nil {
		return e.Vault, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: vault.Label}
	}
	return nil, &NotLoadedError{edge: "vault"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EddsaLocalData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eddsalocaldata.FieldID:
			values[i] = new(sql.NullInt64)
		case eddsalocaldata.FieldXi, eddsalocaldata.FieldShareID, eddsalocaldata.FieldKs, eddsalocaldata.FieldBigXj, eddsalocaldata.FieldEddsaPub:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EddsaLocalData fields.
func (eld *EddsaLocalData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eddsalocaldata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eld.ID = int(value.Int64)
		case eddsalocaldata.FieldXi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xi", values[i])
			} else if value.Valid {
				eld.Xi = value.String
			}
		case eddsalocaldata.FieldShareID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share_id", values[i])
			} else if value.Valid {
				eld.ShareID = value.String
			}
		case eddsalocaldata.FieldKs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ks", values[i])
			} else if value.Valid {
				eld.Ks = value.String
			}
		case eddsalocaldata.FieldBigXj:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field big_xj", values[i])
			} else if value.Valid {
				eld.BigXj = value.String
			}
		case eddsalocaldata.FieldEddsaPub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eddsa_pub", values[i])
			} else if value.Valid {
				eld.EddsaPub = value.String
			}
		default:
			eld.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EddsaLocalData.
// This includes values selected through modifiers, order, etc.
func (eld *EddsaLocalData) Value(name string) (ent.Value, error) {
	return eld.selectValues.Get(name)
}

// QueryVault queries the "vault" edge of the EddsaLocalData entity.
func (eld *EddsaLocalData) QueryVault() *VaultQuery {
	return NewEddsaLocalDataClient(eld.config).QueryVault(eld)
}

// Update returns a builder for updating this EddsaLocalData.
// Note that you need to call EddsaLocalData.Unwrap() before calling this method if this EddsaLocalData
// was returned from a transaction, and the transaction was committed or rolled back.
func (eld *EddsaLocalData) Update() *EddsaLocalDataUpdateOne {
	return NewEddsaLocalDataClient(eld.config).UpdateOne(eld)
}

// Unwrap unwraps the EddsaLocalData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eld *EddsaLocalData) Unwrap() *EddsaLocalData {
	_tx, ok := eld.config.driver.(*txDriver)
	if !ok {
		panic("ent: EddsaLocalData is not a transactional entity")
	}
	eld.config.driver = _tx.drv
	return eld
}

// String implements the fmt.Stringer.
func (eld *EddsaLocalData) String() string {
	var builder strings.Builder
	builder.WriteString("EddsaLocalData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eld.ID))
	builder.WriteString("xi=")
	builder.WriteString(eld.Xi)
	builder.WriteString(", ")
	builder.WriteString("share_id=")
	builder.WriteString(eld.ShareID)
	builder.WriteString(", ")
	builder.WriteString("ks=")
	builder.WriteString(eld.Ks)
	builder.WriteString(", ")
	builder.WriteString("big_xj=")
	builder.WriteString(eld.BigXj)
	builder.WriteString(", ")
	builder.WriteString("eddsa_pub=")
	builder.WriteString(eld.EddsaPub)
	builder.WriteByte(')')
	return builder.String()
}

// EddsaLocalDataSlice is a parsable slice of EddsaLocalData.
type EddsaLocalDataSlice []*EddsaLocalData
