// Code generated by ent, DO NOT EDIT.

package eddsalocaldata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eddsalocaldata type in the database.
	Label = "eddsa_local_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldXi holds the string denoting the xi field in the database.
	FieldXi = "xi"
	// FieldShareID holds the string denoting the share_id field in the database.
	FieldShareID = "share_id"
	// FieldKs holds the string denoting the ks field in the database.
	FieldKs = "ks"
	// FieldBigXj holds the string denoting the big_xj field in the database.
	FieldBigXj = "big_xj"
	// FieldEddsaPub holds the string denoting the eddsa_pub field in the database.
	FieldEddsaPub = "eddsa_pub"
	// EdgeVault holds the string denoting the vault edge name in mutations.
	EdgeVault = "vault"
	// Table holds the table name of the eddsalocaldata in the database.
	Table = "eddsa_local_data"
	// VaultTable is the table that holds the vault relation/edge.
	VaultTable = "vaults"
	// VaultInverseTable is the table name for the Vault entity.
	// It exists in this package in order to avoid circular dependency with the "vault" package.
	VaultInverseTable = "vaults"
	// VaultColumn is the table column denoting the vault relation/edge.
	VaultColumn = "eddsa_local_data_vault"
)

// Columns holds all SQL columns for eddsalocaldata fields.
var Columns = []string{
	FieldID,
	FieldXi,
	FieldShareID,
	FieldKs,
	FieldBigXj,
	FieldEddsaPub,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EddsaLocalData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByXi orders the results by the xi field.
func ByXi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXi, opts...).ToFunc()
}

// ByShareID orders the results by the share_id field.
func ByShareID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShareID, opts...).ToFunc()
}

// ByKs orders the results by the ks field.
func ByKs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKs, opts...).ToFunc()
}

// ByBigXj orders the results by the big_xj field.
func ByBigXj(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBigXj, opts...).ToFunc()
}

// ByEddsaPub orders the results by the eddsa_pub field.
func ByEddsaPub(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEddsaPub, opts...).ToFunc()
}

// ByVaultField orders the results by vault field.
func ByVaultField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVaultStep(), sql.OrderByField(field, opts...))
	}
}
func newVaultStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VaultInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, VaultTable, VaultColumn),
	)
}
