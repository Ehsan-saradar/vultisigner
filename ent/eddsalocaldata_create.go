// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"vultisigner/ent/eddsalocaldata"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EddsaLocalDataCreate is the builder for creating a EddsaLocalData entity.
type EddsaLocalDataCreate struct {
	config
	mutation *EddsaLocalDataMutation
	hooks    []Hook
}

// SetXi sets the "xi" field.
func (eldc *EddsaLocalDataCreate) SetXi(s string) *EddsaLocalDataCreate {
	eldc.mutation.SetXi(s)
	return eldc
}

// SetNillableXi sets the "xi" field if the given value is not nil.
func (eldc *EddsaLocalDataCreate) SetNillableXi(s *string) *EddsaLocalDataCreate {
	if s != nil {
		eldc.SetXi(*s)
	}
	return eldc
}

// SetShareID sets the "share_id" field.
func (eldc *EddsaLocalDataCreate) SetShareID(s string) *EddsaLocalDataCreate {
	eldc.mutation.SetShareID(s)
	return eldc
}

// SetNillableShareID sets the "share_id" field if the given value is not nil.
func (eldc *EddsaLocalDataCreate) SetNillableShareID(s *string) *EddsaLocalDataCreate {
	if s != nil {
		eldc.SetShareID(*s)
	}
	return eldc
}

// SetKs sets the "ks" field.
func (eldc *EddsaLocalDataCreate) SetKs(s string) *EddsaLocalDataCreate {
	eldc.mutation.SetKs(s)
	return eldc
}

// SetNillableKs sets the "ks" field if the given value is not nil.
func (eldc *EddsaLocalDataCreate) SetNillableKs(s *string) *EddsaLocalDataCreate {
	if s != nil {
		eldc.SetKs(*s)
	}
	return eldc
}

// SetBigXj sets the "big_xj" field.
func (eldc *EddsaLocalDataCreate) SetBigXj(s string) *EddsaLocalDataCreate {
	eldc.mutation.SetBigXj(s)
	return eldc
}

// SetNillableBigXj sets the "big_xj" field if the given value is not nil.
func (eldc *EddsaLocalDataCreate) SetNillableBigXj(s *string) *EddsaLocalDataCreate {
	if s != nil {
		eldc.SetBigXj(*s)
	}
	return eldc
}

// SetEddsaPub sets the "eddsa_pub" field.
func (eldc *EddsaLocalDataCreate) SetEddsaPub(s string) *EddsaLocalDataCreate {
	eldc.mutation.SetEddsaPub(s)
	return eldc
}

// SetNillableEddsaPub sets the "eddsa_pub" field if the given value is not nil.
func (eldc *EddsaLocalDataCreate) SetNillableEddsaPub(s *string) *EddsaLocalDataCreate {
	if s != nil {
		eldc.SetEddsaPub(*s)
	}
	return eldc
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (eldc *EddsaLocalDataCreate) SetVaultID(id int) *EddsaLocalDataCreate {
	eldc.mutation.SetVaultID(id)
	return eldc
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (eldc *EddsaLocalDataCreate) SetNillableVaultID(id *int) *EddsaLocalDataCreate {
	if id != nil {
		eldc = eldc.SetVaultID(*id)
	}
	return eldc
}

// SetVault sets the "vault" edge to the Vault entity.
func (eldc *EddsaLocalDataCreate) SetVault(v *Vault) *EddsaLocalDataCreate {
	return eldc.SetVaultID(v.ID)
}

// Mutation returns the EddsaLocalDataMutation object of the builder.
func (eldc *EddsaLocalDataCreate) Mutation() *EddsaLocalDataMutation {
	return eldc.mutation
}

// Save creates the EddsaLocalData in the database.
func (eldc *EddsaLocalDataCreate) Save(ctx context.Context) (*EddsaLocalData, error) {
	return withHooks(ctx, eldc.sqlSave, eldc.mutation, eldc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eldc *EddsaLocalDataCreate) SaveX(ctx context.Context) *EddsaLocalData {
	v, err := eldc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eldc *EddsaLocalDataCreate) Exec(ctx context.Context) error {
	_, err := eldc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eldc *EddsaLocalDataCreate) ExecX(ctx context.Context) {
	if err := eldc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eldc *EddsaLocalDataCreate) check() error {
	return nil
}

func (eldc *EddsaLocalDataCreate) sqlSave(ctx context.Context) (*EddsaLocalData, error) {
	if err := eldc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eldc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eldc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eldc.mutation.id = &_node.ID
	eldc.mutation.done = true
	return _node, nil
}

func (eldc *EddsaLocalDataCreate) createSpec() (*EddsaLocalData, *sqlgraph.CreateSpec) {
	var (
		_node = &EddsaLocalData{config: eldc.config}
		_spec = sqlgraph.NewCreateSpec(eddsalocaldata.Table, sqlgraph.NewFieldSpec(eddsalocaldata.FieldID, field.TypeInt))
	)
	if value, ok := eldc.mutation.Xi(); ok {
		_spec.SetField(eddsalocaldata.FieldXi, field.TypeString, value)
		_node.Xi = value
	}
	if value, ok := eldc.mutation.ShareID(); ok {
		_spec.SetField(eddsalocaldata.FieldShareID, field.TypeString, value)
		_node.ShareID = value
	}
	if value, ok := eldc.mutation.Ks(); ok {
		_spec.SetField(eddsalocaldata.FieldKs, field.TypeString, value)
		_node.Ks = value
	}
	if value, ok := eldc.mutation.BigXj(); ok {
		_spec.SetField(eddsalocaldata.FieldBigXj, field.TypeString, value)
		_node.BigXj = value
	}
	if value, ok := eldc.mutation.EddsaPub(); ok {
		_spec.SetField(eddsalocaldata.FieldEddsaPub, field.TypeString, value)
		_node.EddsaPub = value
	}
	if nodes := eldc.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   eddsalocaldata.VaultTable,
			Columns: []string{eddsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EddsaLocalDataCreateBulk is the builder for creating many EddsaLocalData entities in bulk.
type EddsaLocalDataCreateBulk struct {
	config
	err      error
	builders []*EddsaLocalDataCreate
}

// Save creates the EddsaLocalData entities in the database.
func (eldcb *EddsaLocalDataCreateBulk) Save(ctx context.Context) ([]*EddsaLocalData, error) {
	if eldcb.err != nil {
		return nil, eldcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eldcb.builders))
	nodes := make([]*EddsaLocalData, len(eldcb.builders))
	mutators := make([]Mutator, len(eldcb.builders))
	for i := range eldcb.builders {
		func(i int, root context.Context) {
			builder := eldcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EddsaLocalDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eldcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eldcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eldcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eldcb *EddsaLocalDataCreateBulk) SaveX(ctx context.Context) []*EddsaLocalData {
	v, err := eldcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eldcb *EddsaLocalDataCreateBulk) Exec(ctx context.Context) error {
	_, err := eldcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eldcb *EddsaLocalDataCreateBulk) ExecX(ctx context.Context) {
	if err := eldcb.Exec(ctx); err != nil {
		panic(err)
	}
}
