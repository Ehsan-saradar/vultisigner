// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/eddsalocaldata"
	"vultisigner/ent/predicate"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EddsaLocalDataUpdate is the builder for updating EddsaLocalData entities.
type EddsaLocalDataUpdate struct {
	config
	hooks    []Hook
	mutation *EddsaLocalDataMutation
}

// Where appends a list predicates to the EddsaLocalDataUpdate builder.
func (eldu *EddsaLocalDataUpdate) Where(ps ...predicate.EddsaLocalData) *EddsaLocalDataUpdate {
	eldu.mutation.Where(ps...)
	return eldu
}

// SetXi sets the "xi" field.
func (eldu *EddsaLocalDataUpdate) SetXi(s string) *EddsaLocalDataUpdate {
	eldu.mutation.SetXi(s)
	return eldu
}

// SetNillableXi sets the "xi" field if the given value is not nil.
func (eldu *EddsaLocalDataUpdate) SetNillableXi(s *string) *EddsaLocalDataUpdate {
	if s != nil {
		eldu.SetXi(*s)
	}
	return eldu
}

// ClearXi clears the value of the "xi" field.
func (eldu *EddsaLocalDataUpdate) ClearXi() *EddsaLocalDataUpdate {
	eldu.mutation.ClearXi()
	return eldu
}

// SetShareID sets the "share_id" field.
func (eldu *EddsaLocalDataUpdate) SetShareID(s string) *EddsaLocalDataUpdate {
	eldu.mutation.SetShareID(s)
	return eldu
}

// SetNillableShareID sets the "share_id" field if the given value is not nil.
func (eldu *EddsaLocalDataUpdate) SetNillableShareID(s *string) *EddsaLocalDataUpdate {
	if s != nil {
		eldu.SetShareID(*s)
	}
	return eldu
}

// ClearShareID clears the value of the "share_id" field.
func (eldu *EddsaLocalDataUpdate) ClearShareID() *EddsaLocalDataUpdate {
	eldu.mutation.ClearShareID()
	return eldu
}

// SetKs sets the "ks" field.
func (eldu *EddsaLocalDataUpdate) SetKs(s string) *EddsaLocalDataUpdate {
	eldu.mutation.SetKs(s)
	return eldu
}

// SetNillableKs sets the "ks" field if the given value is not nil.
func (eldu *EddsaLocalDataUpdate) SetNillableKs(s *string) *EddsaLocalDataUpdate {
	if s != nil {
		eldu.SetKs(*s)
	}
	return eldu
}

// ClearKs clears the value of the "ks" field.
func (eldu *EddsaLocalDataUpdate) ClearKs() *EddsaLocalDataUpdate {
	eldu.mutation.ClearKs()
	return eldu
}

// SetBigXj sets the "big_xj" field.
func (eldu *EddsaLocalDataUpdate) SetBigXj(s string) *EddsaLocalDataUpdate {
	eldu.mutation.SetBigXj(s)
	return eldu
}

// SetNillableBigXj sets the "big_xj" field if the given value is not nil.
func (eldu *EddsaLocalDataUpdate) SetNillableBigXj(s *string) *EddsaLocalDataUpdate {
	if s != nil {
		eldu.SetBigXj(*s)
	}
	return eldu
}

// ClearBigXj clears the value of the "big_xj" field.
func (eldu *EddsaLocalDataUpdate) ClearBigXj() *EddsaLocalDataUpdate {
	eldu.mutation.ClearBigXj()
	return eldu
}

// SetEddsaPub sets the "eddsa_pub" field.
func (eldu *EddsaLocalDataUpdate) SetEddsaPub(s string) *EddsaLocalDataUpdate {
	eldu.mutation.SetEddsaPub(s)
	return eldu
}

// SetNillableEddsaPub sets the "eddsa_pub" field if the given value is not nil.
func (eldu *EddsaLocalDataUpdate) SetNillableEddsaPub(s *string) *EddsaLocalDataUpdate {
	if s != nil {
		eldu.SetEddsaPub(*s)
	}
	return eldu
}

// ClearEddsaPub clears the value of the "eddsa_pub" field.
func (eldu *EddsaLocalDataUpdate) ClearEddsaPub() *EddsaLocalDataUpdate {
	eldu.mutation.ClearEddsaPub()
	return eldu
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (eldu *EddsaLocalDataUpdate) SetVaultID(id int) *EddsaLocalDataUpdate {
	eldu.mutation.SetVaultID(id)
	return eldu
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (eldu *EddsaLocalDataUpdate) SetNillableVaultID(id *int) *EddsaLocalDataUpdate {
	if id != nil {
		eldu = eldu.SetVaultID(*id)
	}
	return eldu
}

// SetVault sets the "vault" edge to the Vault entity.
func (eldu *EddsaLocalDataUpdate) SetVault(v *Vault) *EddsaLocalDataUpdate {
	return eldu.SetVaultID(v.ID)
}

// Mutation returns the EddsaLocalDataMutation object of the builder.
func (eldu *EddsaLocalDataUpdate) Mutation() *EddsaLocalDataMutation {
	return eldu.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (eldu *EddsaLocalDataUpdate) ClearVault() *EddsaLocalDataUpdate {
	eldu.mutation.ClearVault()
	return eldu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eldu *EddsaLocalDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eldu.sqlSave, eldu.mutation, eldu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eldu *EddsaLocalDataUpdate) SaveX(ctx context.Context) int {
	affected, err := eldu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eldu *EddsaLocalDataUpdate) Exec(ctx context.Context) error {
	_, err := eldu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eldu *EddsaLocalDataUpdate) ExecX(ctx context.Context) {
	if err := eldu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eldu *EddsaLocalDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eddsalocaldata.Table, eddsalocaldata.Columns, sqlgraph.NewFieldSpec(eddsalocaldata.FieldID, field.TypeInt))
	if ps := eldu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eldu.mutation.Xi(); ok {
		_spec.SetField(eddsalocaldata.FieldXi, field.TypeString, value)
	}
	if eldu.mutation.XiCleared() {
		_spec.ClearField(eddsalocaldata.FieldXi, field.TypeString)
	}
	if value, ok := eldu.mutation.ShareID(); ok {
		_spec.SetField(eddsalocaldata.FieldShareID, field.TypeString, value)
	}
	if eldu.mutation.ShareIDCleared() {
		_spec.ClearField(eddsalocaldata.FieldShareID, field.TypeString)
	}
	if value, ok := eldu.mutation.Ks(); ok {
		_spec.SetField(eddsalocaldata.FieldKs, field.TypeString, value)
	}
	if eldu.mutation.KsCleared() {
		_spec.ClearField(eddsalocaldata.FieldKs, field.TypeString)
	}
	if value, ok := eldu.mutation.BigXj(); ok {
		_spec.SetField(eddsalocaldata.FieldBigXj, field.TypeString, value)
	}
	if eldu.mutation.BigXjCleared() {
		_spec.ClearField(eddsalocaldata.FieldBigXj, field.TypeString)
	}
	if value, ok := eldu.mutation.EddsaPub(); ok {
		_spec.SetField(eddsalocaldata.FieldEddsaPub, field.TypeString, value)
	}
	if eldu.mutation.EddsaPubCleared() {
		_spec.ClearField(eddsalocaldata.FieldEddsaPub, field.TypeString)
	}
	if eldu.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   eddsalocaldata.VaultTable,
			Columns: []string{eddsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eldu.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   eddsalocaldata.VaultTable,
			Columns: []string{eddsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eldu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eddsalocaldata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eldu.mutation.done = true
	return n, nil
}

// EddsaLocalDataUpdateOne is the builder for updating a single EddsaLocalData entity.
type EddsaLocalDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EddsaLocalDataMutation
}

// SetXi sets the "xi" field.
func (elduo *EddsaLocalDataUpdateOne) SetXi(s string) *EddsaLocalDataUpdateOne {
	elduo.mutation.SetXi(s)
	return elduo
}

// SetNillableXi sets the "xi" field if the given value is not nil.
func (elduo *EddsaLocalDataUpdateOne) SetNillableXi(s *string) *EddsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetXi(*s)
	}
	return elduo
}

// ClearXi clears the value of the "xi" field.
func (elduo *EddsaLocalDataUpdateOne) ClearXi() *EddsaLocalDataUpdateOne {
	elduo.mutation.ClearXi()
	return elduo
}

// SetShareID sets the "share_id" field.
func (elduo *EddsaLocalDataUpdateOne) SetShareID(s string) *EddsaLocalDataUpdateOne {
	elduo.mutation.SetShareID(s)
	return elduo
}

// SetNillableShareID sets the "share_id" field if the given value is not nil.
func (elduo *EddsaLocalDataUpdateOne) SetNillableShareID(s *string) *EddsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetShareID(*s)
	}
	return elduo
}

// ClearShareID clears the value of the "share_id" field.
func (elduo *EddsaLocalDataUpdateOne) ClearShareID() *EddsaLocalDataUpdateOne {
	elduo.mutation.ClearShareID()
	return elduo
}

// SetKs sets the "ks" field.
func (elduo *EddsaLocalDataUpdateOne) SetKs(s string) *EddsaLocalDataUpdateOne {
	elduo.mutation.SetKs(s)
	return elduo
}

// SetNillableKs sets the "ks" field if the given value is not nil.
func (elduo *EddsaLocalDataUpdateOne) SetNillableKs(s *string) *EddsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetKs(*s)
	}
	return elduo
}

// ClearKs clears the value of the "ks" field.
func (elduo *EddsaLocalDataUpdateOne) ClearKs() *EddsaLocalDataUpdateOne {
	elduo.mutation.ClearKs()
	return elduo
}

// SetBigXj sets the "big_xj" field.
func (elduo *EddsaLocalDataUpdateOne) SetBigXj(s string) *EddsaLocalDataUpdateOne {
	elduo.mutation.SetBigXj(s)
	return elduo
}

// SetNillableBigXj sets the "big_xj" field if the given value is not nil.
func (elduo *EddsaLocalDataUpdateOne) SetNillableBigXj(s *string) *EddsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetBigXj(*s)
	}
	return elduo
}

// ClearBigXj clears the value of the "big_xj" field.
func (elduo *EddsaLocalDataUpdateOne) ClearBigXj() *EddsaLocalDataUpdateOne {
	elduo.mutation.ClearBigXj()
	return elduo
}

// SetEddsaPub sets the "eddsa_pub" field.
func (elduo *EddsaLocalDataUpdateOne) SetEddsaPub(s string) *EddsaLocalDataUpdateOne {
	elduo.mutation.SetEddsaPub(s)
	return elduo
}

// SetNillableEddsaPub sets the "eddsa_pub" field if the given value is not nil.
func (elduo *EddsaLocalDataUpdateOne) SetNillableEddsaPub(s *string) *EddsaLocalDataUpdateOne {
	if s != nil {
		elduo.SetEddsaPub(*s)
	}
	return elduo
}

// ClearEddsaPub clears the value of the "eddsa_pub" field.
func (elduo *EddsaLocalDataUpdateOne) ClearEddsaPub() *EddsaLocalDataUpdateOne {
	elduo.mutation.ClearEddsaPub()
	return elduo
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (elduo *EddsaLocalDataUpdateOne) SetVaultID(id int) *EddsaLocalDataUpdateOne {
	elduo.mutation.SetVaultID(id)
	return elduo
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (elduo *EddsaLocalDataUpdateOne) SetNillableVaultID(id *int) *EddsaLocalDataUpdateOne {
	if id != nil {
		elduo = elduo.SetVaultID(*id)
	}
	return elduo
}

// SetVault sets the "vault" edge to the Vault entity.
func (elduo *EddsaLocalDataUpdateOne) SetVault(v *Vault) *EddsaLocalDataUpdateOne {
	return elduo.SetVaultID(v.ID)
}

// Mutation returns the EddsaLocalDataMutation object of the builder.
func (elduo *EddsaLocalDataUpdateOne) Mutation() *EddsaLocalDataMutation {
	return elduo.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (elduo *EddsaLocalDataUpdateOne) ClearVault() *EddsaLocalDataUpdateOne {
	elduo.mutation.ClearVault()
	return elduo
}

// Where appends a list predicates to the EddsaLocalDataUpdate builder.
func (elduo *EddsaLocalDataUpdateOne) Where(ps ...predicate.EddsaLocalData) *EddsaLocalDataUpdateOne {
	elduo.mutation.Where(ps...)
	return elduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (elduo *EddsaLocalDataUpdateOne) Select(field string, fields ...string) *EddsaLocalDataUpdateOne {
	elduo.fields = append([]string{field}, fields...)
	return elduo
}

// Save executes the query and returns the updated EddsaLocalData entity.
func (elduo *EddsaLocalDataUpdateOne) Save(ctx context.Context) (*EddsaLocalData, error) {
	return withHooks(ctx, elduo.sqlSave, elduo.mutation, elduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elduo *EddsaLocalDataUpdateOne) SaveX(ctx context.Context) *EddsaLocalData {
	node, err := elduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (elduo *EddsaLocalDataUpdateOne) Exec(ctx context.Context) error {
	_, err := elduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elduo *EddsaLocalDataUpdateOne) ExecX(ctx context.Context) {
	if err := elduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (elduo *EddsaLocalDataUpdateOne) sqlSave(ctx context.Context) (_node *EddsaLocalData, err error) {
	_spec := sqlgraph.NewUpdateSpec(eddsalocaldata.Table, eddsalocaldata.Columns, sqlgraph.NewFieldSpec(eddsalocaldata.FieldID, field.TypeInt))
	id, ok := elduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EddsaLocalData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := elduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eddsalocaldata.FieldID)
		for _, f := range fields {
			if !eddsalocaldata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eddsalocaldata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := elduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elduo.mutation.Xi(); ok {
		_spec.SetField(eddsalocaldata.FieldXi, field.TypeString, value)
	}
	if elduo.mutation.XiCleared() {
		_spec.ClearField(eddsalocaldata.FieldXi, field.TypeString)
	}
	if value, ok := elduo.mutation.ShareID(); ok {
		_spec.SetField(eddsalocaldata.FieldShareID, field.TypeString, value)
	}
	if elduo.mutation.ShareIDCleared() {
		_spec.ClearField(eddsalocaldata.FieldShareID, field.TypeString)
	}
	if value, ok := elduo.mutation.Ks(); ok {
		_spec.SetField(eddsalocaldata.FieldKs, field.TypeString, value)
	}
	if elduo.mutation.KsCleared() {
		_spec.ClearField(eddsalocaldata.FieldKs, field.TypeString)
	}
	if value, ok := elduo.mutation.BigXj(); ok {
		_spec.SetField(eddsalocaldata.FieldBigXj, field.TypeString, value)
	}
	if elduo.mutation.BigXjCleared() {
		_spec.ClearField(eddsalocaldata.FieldBigXj, field.TypeString)
	}
	if value, ok := elduo.mutation.EddsaPub(); ok {
		_spec.SetField(eddsalocaldata.FieldEddsaPub, field.TypeString, value)
	}
	if elduo.mutation.EddsaPubCleared() {
		_spec.ClearField(eddsalocaldata.FieldEddsaPub, field.TypeString)
	}
	if elduo.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   eddsalocaldata.VaultTable,
			Columns: []string{eddsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elduo.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   eddsalocaldata.VaultTable,
			Columns: []string{eddsalocaldata.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EddsaLocalData{config: elduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, elduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eddsalocaldata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	elduo.mutation.done = true
	return _node, nil
}
