// Code generated by ent, DO NOT EDIT.

package pailliersk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pailliersk type in the database.
	Label = "paillier_sk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldN holds the string denoting the n field in the database.
	FieldN = "n"
	// FieldLambdaN holds the string denoting the lambda_n field in the database.
	FieldLambdaN = "lambda_n"
	// FieldPhiN holds the string denoting the phi_n field in the database.
	FieldPhiN = "phi_n"
	// FieldP holds the string denoting the p field in the database.
	FieldP = "p"
	// FieldQ holds the string denoting the q field in the database.
	FieldQ = "q"
	// EdgeVault holds the string denoting the vault edge name in mutations.
	EdgeVault = "vault"
	// Table holds the table name of the pailliersk in the database.
	Table = "paillier_sks"
	// VaultTable is the table that holds the vault relation/edge.
	VaultTable = "vaults"
	// VaultInverseTable is the table name for the Vault entity.
	// It exists in this package in order to avoid circular dependency with the "vault" package.
	VaultInverseTable = "vaults"
	// VaultColumn is the table column denoting the vault relation/edge.
	VaultColumn = "paillier_sk_vault"
)

// Columns holds all SQL columns for pailliersk fields.
var Columns = []string{
	FieldID,
	FieldN,
	FieldLambdaN,
	FieldPhiN,
	FieldP,
	FieldQ,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NValidator is a validator for the "n" field. It is called by the builders before save.
	NValidator func(string) error
	// LambdaNValidator is a validator for the "lambda_n" field. It is called by the builders before save.
	LambdaNValidator func(string) error
	// PhiNValidator is a validator for the "phi_n" field. It is called by the builders before save.
	PhiNValidator func(string) error
	// PValidator is a validator for the "p" field. It is called by the builders before save.
	PValidator func(string) error
	// QValidator is a validator for the "q" field. It is called by the builders before save.
	QValidator func(string) error
)

// OrderOption defines the ordering options for the PaillierSK queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByN orders the results by the n field.
func ByN(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldN, opts...).ToFunc()
}

// ByLambdaN orders the results by the lambda_n field.
func ByLambdaN(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLambdaN, opts...).ToFunc()
}

// ByPhiN orders the results by the phi_n field.
func ByPhiN(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhiN, opts...).ToFunc()
}

// ByP orders the results by the p field.
func ByP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP, opts...).ToFunc()
}

// ByQ orders the results by the q field.
func ByQ(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQ, opts...).ToFunc()
}

// ByVaultField orders the results by vault field.
func ByVaultField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVaultStep(), sql.OrderByField(field, opts...))
	}
}
func newVaultStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VaultInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, VaultTable, VaultColumn),
	)
}
