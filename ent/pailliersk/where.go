// Code generated by ent, DO NOT EDIT.

package pailliersk

import (
	"vultisigner/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLTE(FieldID, id))
}

// N applies equality check predicate on the "n" field. It's identical to NEQ.
func N(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldN, v))
}

// LambdaN applies equality check predicate on the "lambda_n" field. It's identical to LambdaNEQ.
func LambdaN(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldLambdaN, v))
}

// PhiN applies equality check predicate on the "phi_n" field. It's identical to PhiNEQ.
func PhiN(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldPhiN, v))
}

// P applies equality check predicate on the "p" field. It's identical to PEQ.
func P(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldP, v))
}

// Q applies equality check predicate on the "q" field. It's identical to QEQ.
func Q(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldQ, v))
}

// NEQ applies the EQ predicate on the "n" field.
func NEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldN, v))
}

// NNEQ applies the NEQ predicate on the "n" field.
func NNEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNEQ(FieldN, v))
}

// NIn applies the In predicate on the "n" field.
func NIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldIn(FieldN, vs...))
}

// NNotIn applies the NotIn predicate on the "n" field.
func NNotIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNotIn(FieldN, vs...))
}

// NGT applies the GT predicate on the "n" field.
func NGT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGT(FieldN, v))
}

// NGTE applies the GTE predicate on the "n" field.
func NGTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGTE(FieldN, v))
}

// NLT applies the LT predicate on the "n" field.
func NLT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLT(FieldN, v))
}

// NLTE applies the LTE predicate on the "n" field.
func NLTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLTE(FieldN, v))
}

// NContains applies the Contains predicate on the "n" field.
func NContains(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContains(FieldN, v))
}

// NHasPrefix applies the HasPrefix predicate on the "n" field.
func NHasPrefix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasPrefix(FieldN, v))
}

// NHasSuffix applies the HasSuffix predicate on the "n" field.
func NHasSuffix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasSuffix(FieldN, v))
}

// NEqualFold applies the EqualFold predicate on the "n" field.
func NEqualFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEqualFold(FieldN, v))
}

// NContainsFold applies the ContainsFold predicate on the "n" field.
func NContainsFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContainsFold(FieldN, v))
}

// LambdaNEQ applies the EQ predicate on the "lambda_n" field.
func LambdaNEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldLambdaN, v))
}

// LambdaNNEQ applies the NEQ predicate on the "lambda_n" field.
func LambdaNNEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNEQ(FieldLambdaN, v))
}

// LambdaNIn applies the In predicate on the "lambda_n" field.
func LambdaNIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldIn(FieldLambdaN, vs...))
}

// LambdaNNotIn applies the NotIn predicate on the "lambda_n" field.
func LambdaNNotIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNotIn(FieldLambdaN, vs...))
}

// LambdaNGT applies the GT predicate on the "lambda_n" field.
func LambdaNGT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGT(FieldLambdaN, v))
}

// LambdaNGTE applies the GTE predicate on the "lambda_n" field.
func LambdaNGTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGTE(FieldLambdaN, v))
}

// LambdaNLT applies the LT predicate on the "lambda_n" field.
func LambdaNLT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLT(FieldLambdaN, v))
}

// LambdaNLTE applies the LTE predicate on the "lambda_n" field.
func LambdaNLTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLTE(FieldLambdaN, v))
}

// LambdaNContains applies the Contains predicate on the "lambda_n" field.
func LambdaNContains(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContains(FieldLambdaN, v))
}

// LambdaNHasPrefix applies the HasPrefix predicate on the "lambda_n" field.
func LambdaNHasPrefix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasPrefix(FieldLambdaN, v))
}

// LambdaNHasSuffix applies the HasSuffix predicate on the "lambda_n" field.
func LambdaNHasSuffix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasSuffix(FieldLambdaN, v))
}

// LambdaNEqualFold applies the EqualFold predicate on the "lambda_n" field.
func LambdaNEqualFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEqualFold(FieldLambdaN, v))
}

// LambdaNContainsFold applies the ContainsFold predicate on the "lambda_n" field.
func LambdaNContainsFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContainsFold(FieldLambdaN, v))
}

// PhiNEQ applies the EQ predicate on the "phi_n" field.
func PhiNEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldPhiN, v))
}

// PhiNNEQ applies the NEQ predicate on the "phi_n" field.
func PhiNNEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNEQ(FieldPhiN, v))
}

// PhiNIn applies the In predicate on the "phi_n" field.
func PhiNIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldIn(FieldPhiN, vs...))
}

// PhiNNotIn applies the NotIn predicate on the "phi_n" field.
func PhiNNotIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNotIn(FieldPhiN, vs...))
}

// PhiNGT applies the GT predicate on the "phi_n" field.
func PhiNGT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGT(FieldPhiN, v))
}

// PhiNGTE applies the GTE predicate on the "phi_n" field.
func PhiNGTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGTE(FieldPhiN, v))
}

// PhiNLT applies the LT predicate on the "phi_n" field.
func PhiNLT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLT(FieldPhiN, v))
}

// PhiNLTE applies the LTE predicate on the "phi_n" field.
func PhiNLTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLTE(FieldPhiN, v))
}

// PhiNContains applies the Contains predicate on the "phi_n" field.
func PhiNContains(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContains(FieldPhiN, v))
}

// PhiNHasPrefix applies the HasPrefix predicate on the "phi_n" field.
func PhiNHasPrefix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasPrefix(FieldPhiN, v))
}

// PhiNHasSuffix applies the HasSuffix predicate on the "phi_n" field.
func PhiNHasSuffix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasSuffix(FieldPhiN, v))
}

// PhiNEqualFold applies the EqualFold predicate on the "phi_n" field.
func PhiNEqualFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEqualFold(FieldPhiN, v))
}

// PhiNContainsFold applies the ContainsFold predicate on the "phi_n" field.
func PhiNContainsFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContainsFold(FieldPhiN, v))
}

// PEQ applies the EQ predicate on the "p" field.
func PEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldP, v))
}

// PNEQ applies the NEQ predicate on the "p" field.
func PNEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNEQ(FieldP, v))
}

// PIn applies the In predicate on the "p" field.
func PIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldIn(FieldP, vs...))
}

// PNotIn applies the NotIn predicate on the "p" field.
func PNotIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNotIn(FieldP, vs...))
}

// PGT applies the GT predicate on the "p" field.
func PGT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGT(FieldP, v))
}

// PGTE applies the GTE predicate on the "p" field.
func PGTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGTE(FieldP, v))
}

// PLT applies the LT predicate on the "p" field.
func PLT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLT(FieldP, v))
}

// PLTE applies the LTE predicate on the "p" field.
func PLTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLTE(FieldP, v))
}

// PContains applies the Contains predicate on the "p" field.
func PContains(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContains(FieldP, v))
}

// PHasPrefix applies the HasPrefix predicate on the "p" field.
func PHasPrefix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasPrefix(FieldP, v))
}

// PHasSuffix applies the HasSuffix predicate on the "p" field.
func PHasSuffix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasSuffix(FieldP, v))
}

// PEqualFold applies the EqualFold predicate on the "p" field.
func PEqualFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEqualFold(FieldP, v))
}

// PContainsFold applies the ContainsFold predicate on the "p" field.
func PContainsFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContainsFold(FieldP, v))
}

// QEQ applies the EQ predicate on the "q" field.
func QEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEQ(FieldQ, v))
}

// QNEQ applies the NEQ predicate on the "q" field.
func QNEQ(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNEQ(FieldQ, v))
}

// QIn applies the In predicate on the "q" field.
func QIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldIn(FieldQ, vs...))
}

// QNotIn applies the NotIn predicate on the "q" field.
func QNotIn(vs ...string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldNotIn(FieldQ, vs...))
}

// QGT applies the GT predicate on the "q" field.
func QGT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGT(FieldQ, v))
}

// QGTE applies the GTE predicate on the "q" field.
func QGTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldGTE(FieldQ, v))
}

// QLT applies the LT predicate on the "q" field.
func QLT(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLT(FieldQ, v))
}

// QLTE applies the LTE predicate on the "q" field.
func QLTE(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldLTE(FieldQ, v))
}

// QContains applies the Contains predicate on the "q" field.
func QContains(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContains(FieldQ, v))
}

// QHasPrefix applies the HasPrefix predicate on the "q" field.
func QHasPrefix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasPrefix(FieldQ, v))
}

// QHasSuffix applies the HasSuffix predicate on the "q" field.
func QHasSuffix(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldHasSuffix(FieldQ, v))
}

// QEqualFold applies the EqualFold predicate on the "q" field.
func QEqualFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldEqualFold(FieldQ, v))
}

// QContainsFold applies the ContainsFold predicate on the "q" field.
func QContainsFold(v string) predicate.PaillierSK {
	return predicate.PaillierSK(sql.FieldContainsFold(FieldQ, v))
}

// HasVault applies the HasEdge predicate on the "vault" edge.
func HasVault() predicate.PaillierSK {
	return predicate.PaillierSK(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, VaultTable, VaultColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVaultWith applies the HasEdge predicate on the "vault" edge with a given conditions (other predicates).
func HasVaultWith(preds ...predicate.Vault) predicate.PaillierSK {
	return predicate.PaillierSK(func(s *sql.Selector) {
		step := newVaultStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaillierSK) predicate.PaillierSK {
	return predicate.PaillierSK(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaillierSK) predicate.PaillierSK {
	return predicate.PaillierSK(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaillierSK) predicate.PaillierSK {
	return predicate.PaillierSK(sql.NotPredicates(p))
}
