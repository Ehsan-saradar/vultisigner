// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/pailliersk"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaillierSKCreate is the builder for creating a PaillierSK entity.
type PaillierSKCreate struct {
	config
	mutation *PaillierSKMutation
	hooks    []Hook
}

// SetN sets the "n" field.
func (psc *PaillierSKCreate) SetN(s string) *PaillierSKCreate {
	psc.mutation.SetN(s)
	return psc
}

// SetLambdaN sets the "lambda_n" field.
func (psc *PaillierSKCreate) SetLambdaN(s string) *PaillierSKCreate {
	psc.mutation.SetLambdaN(s)
	return psc
}

// SetPhiN sets the "phi_n" field.
func (psc *PaillierSKCreate) SetPhiN(s string) *PaillierSKCreate {
	psc.mutation.SetPhiN(s)
	return psc
}

// SetP sets the "p" field.
func (psc *PaillierSKCreate) SetP(s string) *PaillierSKCreate {
	psc.mutation.SetP(s)
	return psc
}

// SetQ sets the "q" field.
func (psc *PaillierSKCreate) SetQ(s string) *PaillierSKCreate {
	psc.mutation.SetQ(s)
	return psc
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (psc *PaillierSKCreate) SetVaultID(id int) *PaillierSKCreate {
	psc.mutation.SetVaultID(id)
	return psc
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (psc *PaillierSKCreate) SetNillableVaultID(id *int) *PaillierSKCreate {
	if id != nil {
		psc = psc.SetVaultID(*id)
	}
	return psc
}

// SetVault sets the "vault" edge to the Vault entity.
func (psc *PaillierSKCreate) SetVault(v *Vault) *PaillierSKCreate {
	return psc.SetVaultID(v.ID)
}

// Mutation returns the PaillierSKMutation object of the builder.
func (psc *PaillierSKCreate) Mutation() *PaillierSKMutation {
	return psc.mutation
}

// Save creates the PaillierSK in the database.
func (psc *PaillierSKCreate) Save(ctx context.Context) (*PaillierSK, error) {
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PaillierSKCreate) SaveX(ctx context.Context) *PaillierSK {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PaillierSKCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PaillierSKCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PaillierSKCreate) check() error {
	if _, ok := psc.mutation.N(); !ok {
		return &ValidationError{Name: "n", err: errors.New(`ent: missing required field "PaillierSK.n"`)}
	}
	if v, ok := psc.mutation.N(); ok {
		if err := pailliersk.NValidator(v); err != nil {
			return &ValidationError{Name: "n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.n": %w`, err)}
		}
	}
	if _, ok := psc.mutation.LambdaN(); !ok {
		return &ValidationError{Name: "lambda_n", err: errors.New(`ent: missing required field "PaillierSK.lambda_n"`)}
	}
	if v, ok := psc.mutation.LambdaN(); ok {
		if err := pailliersk.LambdaNValidator(v); err != nil {
			return &ValidationError{Name: "lambda_n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.lambda_n": %w`, err)}
		}
	}
	if _, ok := psc.mutation.PhiN(); !ok {
		return &ValidationError{Name: "phi_n", err: errors.New(`ent: missing required field "PaillierSK.phi_n"`)}
	}
	if v, ok := psc.mutation.PhiN(); ok {
		if err := pailliersk.PhiNValidator(v); err != nil {
			return &ValidationError{Name: "phi_n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.phi_n": %w`, err)}
		}
	}
	if _, ok := psc.mutation.P(); !ok {
		return &ValidationError{Name: "p", err: errors.New(`ent: missing required field "PaillierSK.p"`)}
	}
	if v, ok := psc.mutation.P(); ok {
		if err := pailliersk.PValidator(v); err != nil {
			return &ValidationError{Name: "p", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.p": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Q(); !ok {
		return &ValidationError{Name: "q", err: errors.New(`ent: missing required field "PaillierSK.q"`)}
	}
	if v, ok := psc.mutation.Q(); ok {
		if err := pailliersk.QValidator(v); err != nil {
			return &ValidationError{Name: "q", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.q": %w`, err)}
		}
	}
	return nil
}

func (psc *PaillierSKCreate) sqlSave(ctx context.Context) (*PaillierSK, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PaillierSKCreate) createSpec() (*PaillierSK, *sqlgraph.CreateSpec) {
	var (
		_node = &PaillierSK{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(pailliersk.Table, sqlgraph.NewFieldSpec(pailliersk.FieldID, field.TypeInt))
	)
	if value, ok := psc.mutation.N(); ok {
		_spec.SetField(pailliersk.FieldN, field.TypeString, value)
		_node.N = value
	}
	if value, ok := psc.mutation.LambdaN(); ok {
		_spec.SetField(pailliersk.FieldLambdaN, field.TypeString, value)
		_node.LambdaN = value
	}
	if value, ok := psc.mutation.PhiN(); ok {
		_spec.SetField(pailliersk.FieldPhiN, field.TypeString, value)
		_node.PhiN = value
	}
	if value, ok := psc.mutation.P(); ok {
		_spec.SetField(pailliersk.FieldP, field.TypeString, value)
		_node.P = value
	}
	if value, ok := psc.mutation.Q(); ok {
		_spec.SetField(pailliersk.FieldQ, field.TypeString, value)
		_node.Q = value
	}
	if nodes := psc.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pailliersk.VaultTable,
			Columns: []string{pailliersk.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaillierSKCreateBulk is the builder for creating many PaillierSK entities in bulk.
type PaillierSKCreateBulk struct {
	config
	err      error
	builders []*PaillierSKCreate
}

// Save creates the PaillierSK entities in the database.
func (pscb *PaillierSKCreateBulk) Save(ctx context.Context) ([]*PaillierSK, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PaillierSK, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaillierSKMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PaillierSKCreateBulk) SaveX(ctx context.Context) []*PaillierSK {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PaillierSKCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PaillierSKCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
