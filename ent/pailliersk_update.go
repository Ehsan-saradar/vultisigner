// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/pailliersk"
	"vultisigner/ent/predicate"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaillierSKUpdate is the builder for updating PaillierSK entities.
type PaillierSKUpdate struct {
	config
	hooks    []Hook
	mutation *PaillierSKMutation
}

// Where appends a list predicates to the PaillierSKUpdate builder.
func (psu *PaillierSKUpdate) Where(ps ...predicate.PaillierSK) *PaillierSKUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetN sets the "n" field.
func (psu *PaillierSKUpdate) SetN(s string) *PaillierSKUpdate {
	psu.mutation.SetN(s)
	return psu
}

// SetNillableN sets the "n" field if the given value is not nil.
func (psu *PaillierSKUpdate) SetNillableN(s *string) *PaillierSKUpdate {
	if s != nil {
		psu.SetN(*s)
	}
	return psu
}

// SetLambdaN sets the "lambda_n" field.
func (psu *PaillierSKUpdate) SetLambdaN(s string) *PaillierSKUpdate {
	psu.mutation.SetLambdaN(s)
	return psu
}

// SetNillableLambdaN sets the "lambda_n" field if the given value is not nil.
func (psu *PaillierSKUpdate) SetNillableLambdaN(s *string) *PaillierSKUpdate {
	if s != nil {
		psu.SetLambdaN(*s)
	}
	return psu
}

// SetPhiN sets the "phi_n" field.
func (psu *PaillierSKUpdate) SetPhiN(s string) *PaillierSKUpdate {
	psu.mutation.SetPhiN(s)
	return psu
}

// SetNillablePhiN sets the "phi_n" field if the given value is not nil.
func (psu *PaillierSKUpdate) SetNillablePhiN(s *string) *PaillierSKUpdate {
	if s != nil {
		psu.SetPhiN(*s)
	}
	return psu
}

// SetP sets the "p" field.
func (psu *PaillierSKUpdate) SetP(s string) *PaillierSKUpdate {
	psu.mutation.SetP(s)
	return psu
}

// SetNillableP sets the "p" field if the given value is not nil.
func (psu *PaillierSKUpdate) SetNillableP(s *string) *PaillierSKUpdate {
	if s != nil {
		psu.SetP(*s)
	}
	return psu
}

// SetQ sets the "q" field.
func (psu *PaillierSKUpdate) SetQ(s string) *PaillierSKUpdate {
	psu.mutation.SetQ(s)
	return psu
}

// SetNillableQ sets the "q" field if the given value is not nil.
func (psu *PaillierSKUpdate) SetNillableQ(s *string) *PaillierSKUpdate {
	if s != nil {
		psu.SetQ(*s)
	}
	return psu
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (psu *PaillierSKUpdate) SetVaultID(id int) *PaillierSKUpdate {
	psu.mutation.SetVaultID(id)
	return psu
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (psu *PaillierSKUpdate) SetNillableVaultID(id *int) *PaillierSKUpdate {
	if id != nil {
		psu = psu.SetVaultID(*id)
	}
	return psu
}

// SetVault sets the "vault" edge to the Vault entity.
func (psu *PaillierSKUpdate) SetVault(v *Vault) *PaillierSKUpdate {
	return psu.SetVaultID(v.ID)
}

// Mutation returns the PaillierSKMutation object of the builder.
func (psu *PaillierSKUpdate) Mutation() *PaillierSKMutation {
	return psu.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (psu *PaillierSKUpdate) ClearVault() *PaillierSKUpdate {
	psu.mutation.ClearVault()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PaillierSKUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PaillierSKUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PaillierSKUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PaillierSKUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PaillierSKUpdate) check() error {
	if v, ok := psu.mutation.N(); ok {
		if err := pailliersk.NValidator(v); err != nil {
			return &ValidationError{Name: "n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.n": %w`, err)}
		}
	}
	if v, ok := psu.mutation.LambdaN(); ok {
		if err := pailliersk.LambdaNValidator(v); err != nil {
			return &ValidationError{Name: "lambda_n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.lambda_n": %w`, err)}
		}
	}
	if v, ok := psu.mutation.PhiN(); ok {
		if err := pailliersk.PhiNValidator(v); err != nil {
			return &ValidationError{Name: "phi_n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.phi_n": %w`, err)}
		}
	}
	if v, ok := psu.mutation.P(); ok {
		if err := pailliersk.PValidator(v); err != nil {
			return &ValidationError{Name: "p", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.p": %w`, err)}
		}
	}
	if v, ok := psu.mutation.Q(); ok {
		if err := pailliersk.QValidator(v); err != nil {
			return &ValidationError{Name: "q", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.q": %w`, err)}
		}
	}
	return nil
}

func (psu *PaillierSKUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pailliersk.Table, pailliersk.Columns, sqlgraph.NewFieldSpec(pailliersk.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.N(); ok {
		_spec.SetField(pailliersk.FieldN, field.TypeString, value)
	}
	if value, ok := psu.mutation.LambdaN(); ok {
		_spec.SetField(pailliersk.FieldLambdaN, field.TypeString, value)
	}
	if value, ok := psu.mutation.PhiN(); ok {
		_spec.SetField(pailliersk.FieldPhiN, field.TypeString, value)
	}
	if value, ok := psu.mutation.P(); ok {
		_spec.SetField(pailliersk.FieldP, field.TypeString, value)
	}
	if value, ok := psu.mutation.Q(); ok {
		_spec.SetField(pailliersk.FieldQ, field.TypeString, value)
	}
	if psu.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pailliersk.VaultTable,
			Columns: []string{pailliersk.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pailliersk.VaultTable,
			Columns: []string{pailliersk.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pailliersk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PaillierSKUpdateOne is the builder for updating a single PaillierSK entity.
type PaillierSKUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaillierSKMutation
}

// SetN sets the "n" field.
func (psuo *PaillierSKUpdateOne) SetN(s string) *PaillierSKUpdateOne {
	psuo.mutation.SetN(s)
	return psuo
}

// SetNillableN sets the "n" field if the given value is not nil.
func (psuo *PaillierSKUpdateOne) SetNillableN(s *string) *PaillierSKUpdateOne {
	if s != nil {
		psuo.SetN(*s)
	}
	return psuo
}

// SetLambdaN sets the "lambda_n" field.
func (psuo *PaillierSKUpdateOne) SetLambdaN(s string) *PaillierSKUpdateOne {
	psuo.mutation.SetLambdaN(s)
	return psuo
}

// SetNillableLambdaN sets the "lambda_n" field if the given value is not nil.
func (psuo *PaillierSKUpdateOne) SetNillableLambdaN(s *string) *PaillierSKUpdateOne {
	if s != nil {
		psuo.SetLambdaN(*s)
	}
	return psuo
}

// SetPhiN sets the "phi_n" field.
func (psuo *PaillierSKUpdateOne) SetPhiN(s string) *PaillierSKUpdateOne {
	psuo.mutation.SetPhiN(s)
	return psuo
}

// SetNillablePhiN sets the "phi_n" field if the given value is not nil.
func (psuo *PaillierSKUpdateOne) SetNillablePhiN(s *string) *PaillierSKUpdateOne {
	if s != nil {
		psuo.SetPhiN(*s)
	}
	return psuo
}

// SetP sets the "p" field.
func (psuo *PaillierSKUpdateOne) SetP(s string) *PaillierSKUpdateOne {
	psuo.mutation.SetP(s)
	return psuo
}

// SetNillableP sets the "p" field if the given value is not nil.
func (psuo *PaillierSKUpdateOne) SetNillableP(s *string) *PaillierSKUpdateOne {
	if s != nil {
		psuo.SetP(*s)
	}
	return psuo
}

// SetQ sets the "q" field.
func (psuo *PaillierSKUpdateOne) SetQ(s string) *PaillierSKUpdateOne {
	psuo.mutation.SetQ(s)
	return psuo
}

// SetNillableQ sets the "q" field if the given value is not nil.
func (psuo *PaillierSKUpdateOne) SetNillableQ(s *string) *PaillierSKUpdateOne {
	if s != nil {
		psuo.SetQ(*s)
	}
	return psuo
}

// SetVaultID sets the "vault" edge to the Vault entity by ID.
func (psuo *PaillierSKUpdateOne) SetVaultID(id int) *PaillierSKUpdateOne {
	psuo.mutation.SetVaultID(id)
	return psuo
}

// SetNillableVaultID sets the "vault" edge to the Vault entity by ID if the given value is not nil.
func (psuo *PaillierSKUpdateOne) SetNillableVaultID(id *int) *PaillierSKUpdateOne {
	if id != nil {
		psuo = psuo.SetVaultID(*id)
	}
	return psuo
}

// SetVault sets the "vault" edge to the Vault entity.
func (psuo *PaillierSKUpdateOne) SetVault(v *Vault) *PaillierSKUpdateOne {
	return psuo.SetVaultID(v.ID)
}

// Mutation returns the PaillierSKMutation object of the builder.
func (psuo *PaillierSKUpdateOne) Mutation() *PaillierSKMutation {
	return psuo.mutation
}

// ClearVault clears the "vault" edge to the Vault entity.
func (psuo *PaillierSKUpdateOne) ClearVault() *PaillierSKUpdateOne {
	psuo.mutation.ClearVault()
	return psuo
}

// Where appends a list predicates to the PaillierSKUpdate builder.
func (psuo *PaillierSKUpdateOne) Where(ps ...predicate.PaillierSK) *PaillierSKUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PaillierSKUpdateOne) Select(field string, fields ...string) *PaillierSKUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PaillierSK entity.
func (psuo *PaillierSKUpdateOne) Save(ctx context.Context) (*PaillierSK, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PaillierSKUpdateOne) SaveX(ctx context.Context) *PaillierSK {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PaillierSKUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PaillierSKUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PaillierSKUpdateOne) check() error {
	if v, ok := psuo.mutation.N(); ok {
		if err := pailliersk.NValidator(v); err != nil {
			return &ValidationError{Name: "n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.n": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.LambdaN(); ok {
		if err := pailliersk.LambdaNValidator(v); err != nil {
			return &ValidationError{Name: "lambda_n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.lambda_n": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.PhiN(); ok {
		if err := pailliersk.PhiNValidator(v); err != nil {
			return &ValidationError{Name: "phi_n", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.phi_n": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.P(); ok {
		if err := pailliersk.PValidator(v); err != nil {
			return &ValidationError{Name: "p", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.p": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.Q(); ok {
		if err := pailliersk.QValidator(v); err != nil {
			return &ValidationError{Name: "q", err: fmt.Errorf(`ent: validator failed for field "PaillierSK.q": %w`, err)}
		}
	}
	return nil
}

func (psuo *PaillierSKUpdateOne) sqlSave(ctx context.Context) (_node *PaillierSK, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pailliersk.Table, pailliersk.Columns, sqlgraph.NewFieldSpec(pailliersk.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaillierSK.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pailliersk.FieldID)
		for _, f := range fields {
			if !pailliersk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pailliersk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.N(); ok {
		_spec.SetField(pailliersk.FieldN, field.TypeString, value)
	}
	if value, ok := psuo.mutation.LambdaN(); ok {
		_spec.SetField(pailliersk.FieldLambdaN, field.TypeString, value)
	}
	if value, ok := psuo.mutation.PhiN(); ok {
		_spec.SetField(pailliersk.FieldPhiN, field.TypeString, value)
	}
	if value, ok := psuo.mutation.P(); ok {
		_spec.SetField(pailliersk.FieldP, field.TypeString, value)
	}
	if value, ok := psuo.mutation.Q(); ok {
		_spec.SetField(pailliersk.FieldQ, field.TypeString, value)
	}
	if psuo.mutation.VaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pailliersk.VaultTable,
			Columns: []string{pailliersk.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.VaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pailliersk.VaultTable,
			Columns: []string{pailliersk.VaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaillierSK{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pailliersk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
