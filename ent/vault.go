// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"vultisigner/ent/ecdsalocaldata"
	"vultisigner/ent/eddsalocaldata"
	"vultisigner/ent/pailliersk"
	"vultisigner/ent/vault"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Vault is the model entity for the Vault schema.
type Vault struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PubKey holds the value of the "pub_key" field.
	PubKey string `json:"pub_key,omitempty"`
	// KeygenCommitteeKeys holds the value of the "keygen_committee_keys" field.
	KeygenCommitteeKeys []string `json:"keygen_committee_keys,omitempty"`
	// LocalPartyKey holds the value of the "local_party_key" field.
	LocalPartyKey string `json:"local_party_key,omitempty"`
	// ChainCodeHex holds the value of the "chain_code_hex" field.
	ChainCodeHex string `json:"chain_code_hex,omitempty"`
	// ResharePrefix holds the value of the "reshare_prefix" field.
	ResharePrefix string `json:"reshare_prefix,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VaultQuery when eager-loading is set.
	Edges                  VaultEdges `json:"edges"`
	ecdsa_local_data_vault *int
	eddsa_local_data_vault *int
	paillier_sk_vault      *int
	selectValues           sql.SelectValues
}

// VaultEdges holds the relations/edges for other nodes in the graph.
type VaultEdges struct {
	// PaillierSk holds the value of the paillier_sk edge.
	PaillierSk *PaillierSK `json:"paillier_sk,omitempty"`
	// EcdsaLocalData holds the value of the ecdsa_local_data edge.
	EcdsaLocalData *EcdsaLocalData `json:"ecdsa_local_data,omitempty"`
	// EddsaLocalData holds the value of the eddsa_local_data edge.
	EddsaLocalData *EddsaLocalData `json:"eddsa_local_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PaillierSkOrErr returns the PaillierSk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VaultEdges) PaillierSkOrErr() (*PaillierSK, error) {
	if e.PaillierSk != nil {
		return e.PaillierSk, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pailliersk.Label}
	}
	return nil, &NotLoadedError{edge: "paillier_sk"}
}

// EcdsaLocalDataOrErr returns the EcdsaLocalData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VaultEdges) EcdsaLocalDataOrErr() (*EcdsaLocalData, error) {
	if e.EcdsaLocalData != nil {
		return e.EcdsaLocalData, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: ecdsalocaldata.Label}
	}
	return nil, &NotLoadedError{edge: "ecdsa_local_data"}
}

// EddsaLocalDataOrErr returns the EddsaLocalData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VaultEdges) EddsaLocalDataOrErr() (*EddsaLocalData, error) {
	if e.EddsaLocalData != nil {
		return e.EddsaLocalData, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: eddsalocaldata.Label}
	}
	return nil, &NotLoadedError{edge: "eddsa_local_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vault) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vault.FieldKeygenCommitteeKeys:
			values[i] = new([]byte)
		case vault.FieldID:
			values[i] = new(sql.NullInt64)
		case vault.FieldName, vault.FieldPubKey, vault.FieldLocalPartyKey, vault.FieldChainCodeHex, vault.FieldResharePrefix:
			values[i] = new(sql.NullString)
		case vault.ForeignKeys[0]: // ecdsa_local_data_vault
			values[i] = new(sql.NullInt64)
		case vault.ForeignKeys[1]: // eddsa_local_data_vault
			values[i] = new(sql.NullInt64)
		case vault.ForeignKeys[2]: // paillier_sk_vault
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vault fields.
func (v *Vault) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vault.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vault.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case vault.FieldPubKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pub_key", values[i])
			} else if value.Valid {
				v.PubKey = value.String
			}
		case vault.FieldKeygenCommitteeKeys:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field keygen_committee_keys", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.KeygenCommitteeKeys); err != nil {
					return fmt.Errorf("unmarshal field keygen_committee_keys: %w", err)
				}
			}
		case vault.FieldLocalPartyKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_party_key", values[i])
			} else if value.Valid {
				v.LocalPartyKey = value.String
			}
		case vault.FieldChainCodeHex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_code_hex", values[i])
			} else if value.Valid {
				v.ChainCodeHex = value.String
			}
		case vault.FieldResharePrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reshare_prefix", values[i])
			} else if value.Valid {
				v.ResharePrefix = value.String
			}
		case vault.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ecdsa_local_data_vault", value)
			} else if value.Valid {
				v.ecdsa_local_data_vault = new(int)
				*v.ecdsa_local_data_vault = int(value.Int64)
			}
		case vault.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field eddsa_local_data_vault", value)
			} else if value.Valid {
				v.eddsa_local_data_vault = new(int)
				*v.eddsa_local_data_vault = int(value.Int64)
			}
		case vault.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field paillier_sk_vault", value)
			} else if value.Valid {
				v.paillier_sk_vault = new(int)
				*v.paillier_sk_vault = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vault.
// This includes values selected through modifiers, order, etc.
func (v *Vault) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryPaillierSk queries the "paillier_sk" edge of the Vault entity.
func (v *Vault) QueryPaillierSk() *PaillierSKQuery {
	return NewVaultClient(v.config).QueryPaillierSk(v)
}

// QueryEcdsaLocalData queries the "ecdsa_local_data" edge of the Vault entity.
func (v *Vault) QueryEcdsaLocalData() *EcdsaLocalDataQuery {
	return NewVaultClient(v.config).QueryEcdsaLocalData(v)
}

// QueryEddsaLocalData queries the "eddsa_local_data" edge of the Vault entity.
func (v *Vault) QueryEddsaLocalData() *EddsaLocalDataQuery {
	return NewVaultClient(v.config).QueryEddsaLocalData(v)
}

// Update returns a builder for updating this Vault.
// Note that you need to call Vault.Unwrap() before calling this method if this Vault
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vault) Update() *VaultUpdateOne {
	return NewVaultClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vault entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vault) Unwrap() *Vault {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vault is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vault) String() string {
	var builder strings.Builder
	builder.WriteString("Vault(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("pub_key=")
	builder.WriteString(v.PubKey)
	builder.WriteString(", ")
	builder.WriteString("keygen_committee_keys=")
	builder.WriteString(fmt.Sprintf("%v", v.KeygenCommitteeKeys))
	builder.WriteString(", ")
	builder.WriteString("local_party_key=")
	builder.WriteString(v.LocalPartyKey)
	builder.WriteString(", ")
	builder.WriteString("chain_code_hex=")
	builder.WriteString(v.ChainCodeHex)
	builder.WriteString(", ")
	builder.WriteString("reshare_prefix=")
	builder.WriteString(v.ResharePrefix)
	builder.WriteByte(')')
	return builder.String()
}

// Vaults is a parsable slice of Vault.
type Vaults []*Vault
