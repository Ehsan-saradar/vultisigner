// Code generated by ent, DO NOT EDIT.

package vault

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vault type in the database.
	Label = "vault"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPubKey holds the string denoting the pub_key field in the database.
	FieldPubKey = "pub_key"
	// FieldKeygenCommitteeKeys holds the string denoting the keygen_committee_keys field in the database.
	FieldKeygenCommitteeKeys = "keygen_committee_keys"
	// FieldLocalPartyKey holds the string denoting the local_party_key field in the database.
	FieldLocalPartyKey = "local_party_key"
	// FieldChainCodeHex holds the string denoting the chain_code_hex field in the database.
	FieldChainCodeHex = "chain_code_hex"
	// FieldResharePrefix holds the string denoting the reshare_prefix field in the database.
	FieldResharePrefix = "reshare_prefix"
	// EdgePaillierSk holds the string denoting the paillier_sk edge name in mutations.
	EdgePaillierSk = "paillier_sk"
	// EdgeEcdsaLocalData holds the string denoting the ecdsa_local_data edge name in mutations.
	EdgeEcdsaLocalData = "ecdsa_local_data"
	// EdgeEddsaLocalData holds the string denoting the eddsa_local_data edge name in mutations.
	EdgeEddsaLocalData = "eddsa_local_data"
	// Table holds the table name of the vault in the database.
	Table = "vaults"
	// PaillierSkTable is the table that holds the paillier_sk relation/edge.
	PaillierSkTable = "vaults"
	// PaillierSkInverseTable is the table name for the PaillierSK entity.
	// It exists in this package in order to avoid circular dependency with the "pailliersk" package.
	PaillierSkInverseTable = "paillier_sks"
	// PaillierSkColumn is the table column denoting the paillier_sk relation/edge.
	PaillierSkColumn = "paillier_sk_vault"
	// EcdsaLocalDataTable is the table that holds the ecdsa_local_data relation/edge.
	EcdsaLocalDataTable = "vaults"
	// EcdsaLocalDataInverseTable is the table name for the EcdsaLocalData entity.
	// It exists in this package in order to avoid circular dependency with the "ecdsalocaldata" package.
	EcdsaLocalDataInverseTable = "ecdsa_local_data"
	// EcdsaLocalDataColumn is the table column denoting the ecdsa_local_data relation/edge.
	EcdsaLocalDataColumn = "ecdsa_local_data_vault"
	// EddsaLocalDataTable is the table that holds the eddsa_local_data relation/edge.
	EddsaLocalDataTable = "vaults"
	// EddsaLocalDataInverseTable is the table name for the EddsaLocalData entity.
	// It exists in this package in order to avoid circular dependency with the "eddsalocaldata" package.
	EddsaLocalDataInverseTable = "eddsa_local_data"
	// EddsaLocalDataColumn is the table column denoting the eddsa_local_data relation/edge.
	EddsaLocalDataColumn = "eddsa_local_data_vault"
)

// Columns holds all SQL columns for vault fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPubKey,
	FieldKeygenCommitteeKeys,
	FieldLocalPartyKey,
	FieldChainCodeHex,
	FieldResharePrefix,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vaults"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ecdsa_local_data_vault",
	"eddsa_local_data_vault",
	"paillier_sk_vault",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PubKeyValidator is a validator for the "pub_key" field. It is called by the builders before save.
	PubKeyValidator func(string) error
	// LocalPartyKeyValidator is a validator for the "local_party_key" field. It is called by the builders before save.
	LocalPartyKeyValidator func(string) error
	// ChainCodeHexValidator is a validator for the "chain_code_hex" field. It is called by the builders before save.
	ChainCodeHexValidator func(string) error
)

// OrderOption defines the ordering options for the Vault queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPubKey orders the results by the pub_key field.
func ByPubKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPubKey, opts...).ToFunc()
}

// ByLocalPartyKey orders the results by the local_party_key field.
func ByLocalPartyKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalPartyKey, opts...).ToFunc()
}

// ByChainCodeHex orders the results by the chain_code_hex field.
func ByChainCodeHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainCodeHex, opts...).ToFunc()
}

// ByResharePrefix orders the results by the reshare_prefix field.
func ByResharePrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResharePrefix, opts...).ToFunc()
}

// ByPaillierSkField orders the results by paillier_sk field.
func ByPaillierSkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaillierSkStep(), sql.OrderByField(field, opts...))
	}
}

// ByEcdsaLocalDataField orders the results by ecdsa_local_data field.
func ByEcdsaLocalDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEcdsaLocalDataStep(), sql.OrderByField(field, opts...))
	}
}

// ByEddsaLocalDataField orders the results by eddsa_local_data field.
func ByEddsaLocalDataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEddsaLocalDataStep(), sql.OrderByField(field, opts...))
	}
}
func newPaillierSkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaillierSkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PaillierSkTable, PaillierSkColumn),
	)
}
func newEcdsaLocalDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EcdsaLocalDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EcdsaLocalDataTable, EcdsaLocalDataColumn),
	)
}
func newEddsaLocalDataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EddsaLocalDataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EddsaLocalDataTable, EddsaLocalDataColumn),
	)
}
