// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"vultisigner/ent/ecdsalocaldata"
	"vultisigner/ent/eddsalocaldata"
	"vultisigner/ent/pailliersk"
	"vultisigner/ent/predicate"
	"vultisigner/ent/vault"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VaultUpdate is the builder for updating Vault entities.
type VaultUpdate struct {
	config
	hooks    []Hook
	mutation *VaultMutation
}

// Where appends a list predicates to the VaultUpdate builder.
func (vu *VaultUpdate) Where(ps ...predicate.Vault) *VaultUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetName sets the "name" field.
func (vu *VaultUpdate) SetName(s string) *VaultUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VaultUpdate) SetNillableName(s *string) *VaultUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetPubKey sets the "pub_key" field.
func (vu *VaultUpdate) SetPubKey(s string) *VaultUpdate {
	vu.mutation.SetPubKey(s)
	return vu
}

// SetNillablePubKey sets the "pub_key" field if the given value is not nil.
func (vu *VaultUpdate) SetNillablePubKey(s *string) *VaultUpdate {
	if s != nil {
		vu.SetPubKey(*s)
	}
	return vu
}

// ClearPubKey clears the value of the "pub_key" field.
func (vu *VaultUpdate) ClearPubKey() *VaultUpdate {
	vu.mutation.ClearPubKey()
	return vu
}

// SetKeygenCommitteeKeys sets the "keygen_committee_keys" field.
func (vu *VaultUpdate) SetKeygenCommitteeKeys(s []string) *VaultUpdate {
	vu.mutation.SetKeygenCommitteeKeys(s)
	return vu
}

// AppendKeygenCommitteeKeys appends s to the "keygen_committee_keys" field.
func (vu *VaultUpdate) AppendKeygenCommitteeKeys(s []string) *VaultUpdate {
	vu.mutation.AppendKeygenCommitteeKeys(s)
	return vu
}

// ClearKeygenCommitteeKeys clears the value of the "keygen_committee_keys" field.
func (vu *VaultUpdate) ClearKeygenCommitteeKeys() *VaultUpdate {
	vu.mutation.ClearKeygenCommitteeKeys()
	return vu
}

// SetLocalPartyKey sets the "local_party_key" field.
func (vu *VaultUpdate) SetLocalPartyKey(s string) *VaultUpdate {
	vu.mutation.SetLocalPartyKey(s)
	return vu
}

// SetNillableLocalPartyKey sets the "local_party_key" field if the given value is not nil.
func (vu *VaultUpdate) SetNillableLocalPartyKey(s *string) *VaultUpdate {
	if s != nil {
		vu.SetLocalPartyKey(*s)
	}
	return vu
}

// SetChainCodeHex sets the "chain_code_hex" field.
func (vu *VaultUpdate) SetChainCodeHex(s string) *VaultUpdate {
	vu.mutation.SetChainCodeHex(s)
	return vu
}

// SetNillableChainCodeHex sets the "chain_code_hex" field if the given value is not nil.
func (vu *VaultUpdate) SetNillableChainCodeHex(s *string) *VaultUpdate {
	if s != nil {
		vu.SetChainCodeHex(*s)
	}
	return vu
}

// SetResharePrefix sets the "reshare_prefix" field.
func (vu *VaultUpdate) SetResharePrefix(s string) *VaultUpdate {
	vu.mutation.SetResharePrefix(s)
	return vu
}

// SetNillableResharePrefix sets the "reshare_prefix" field if the given value is not nil.
func (vu *VaultUpdate) SetNillableResharePrefix(s *string) *VaultUpdate {
	if s != nil {
		vu.SetResharePrefix(*s)
	}
	return vu
}

// ClearResharePrefix clears the value of the "reshare_prefix" field.
func (vu *VaultUpdate) ClearResharePrefix() *VaultUpdate {
	vu.mutation.ClearResharePrefix()
	return vu
}

// SetPaillierSkID sets the "paillier_sk" edge to the PaillierSK entity by ID.
func (vu *VaultUpdate) SetPaillierSkID(id int) *VaultUpdate {
	vu.mutation.SetPaillierSkID(id)
	return vu
}

// SetNillablePaillierSkID sets the "paillier_sk" edge to the PaillierSK entity by ID if the given value is not nil.
func (vu *VaultUpdate) SetNillablePaillierSkID(id *int) *VaultUpdate {
	if id != nil {
		vu = vu.SetPaillierSkID(*id)
	}
	return vu
}

// SetPaillierSk sets the "paillier_sk" edge to the PaillierSK entity.
func (vu *VaultUpdate) SetPaillierSk(p *PaillierSK) *VaultUpdate {
	return vu.SetPaillierSkID(p.ID)
}

// SetEcdsaLocalDataID sets the "ecdsa_local_data" edge to the EcdsaLocalData entity by ID.
func (vu *VaultUpdate) SetEcdsaLocalDataID(id int) *VaultUpdate {
	vu.mutation.SetEcdsaLocalDataID(id)
	return vu
}

// SetNillableEcdsaLocalDataID sets the "ecdsa_local_data" edge to the EcdsaLocalData entity by ID if the given value is not nil.
func (vu *VaultUpdate) SetNillableEcdsaLocalDataID(id *int) *VaultUpdate {
	if id != nil {
		vu = vu.SetEcdsaLocalDataID(*id)
	}
	return vu
}

// SetEcdsaLocalData sets the "ecdsa_local_data" edge to the EcdsaLocalData entity.
func (vu *VaultUpdate) SetEcdsaLocalData(e *EcdsaLocalData) *VaultUpdate {
	return vu.SetEcdsaLocalDataID(e.ID)
}

// SetEddsaLocalDataID sets the "eddsa_local_data" edge to the EddsaLocalData entity by ID.
func (vu *VaultUpdate) SetEddsaLocalDataID(id int) *VaultUpdate {
	vu.mutation.SetEddsaLocalDataID(id)
	return vu
}

// SetNillableEddsaLocalDataID sets the "eddsa_local_data" edge to the EddsaLocalData entity by ID if the given value is not nil.
func (vu *VaultUpdate) SetNillableEddsaLocalDataID(id *int) *VaultUpdate {
	if id != nil {
		vu = vu.SetEddsaLocalDataID(*id)
	}
	return vu
}

// SetEddsaLocalData sets the "eddsa_local_data" edge to the EddsaLocalData entity.
func (vu *VaultUpdate) SetEddsaLocalData(e *EddsaLocalData) *VaultUpdate {
	return vu.SetEddsaLocalDataID(e.ID)
}

// Mutation returns the VaultMutation object of the builder.
func (vu *VaultUpdate) Mutation() *VaultMutation {
	return vu.mutation
}

// ClearPaillierSk clears the "paillier_sk" edge to the PaillierSK entity.
func (vu *VaultUpdate) ClearPaillierSk() *VaultUpdate {
	vu.mutation.ClearPaillierSk()
	return vu
}

// ClearEcdsaLocalData clears the "ecdsa_local_data" edge to the EcdsaLocalData entity.
func (vu *VaultUpdate) ClearEcdsaLocalData() *VaultUpdate {
	vu.mutation.ClearEcdsaLocalData()
	return vu
}

// ClearEddsaLocalData clears the "eddsa_local_data" edge to the EddsaLocalData entity.
func (vu *VaultUpdate) ClearEddsaLocalData() *VaultUpdate {
	vu.mutation.ClearEddsaLocalData()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VaultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VaultUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VaultUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VaultUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VaultUpdate) check() error {
	if v, ok := vu.mutation.Name(); ok {
		if err := vault.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vault.name": %w`, err)}
		}
	}
	if v, ok := vu.mutation.PubKey(); ok {
		if err := vault.PubKeyValidator(v); err != nil {
			return &ValidationError{Name: "pub_key", err: fmt.Errorf(`ent: validator failed for field "Vault.pub_key": %w`, err)}
		}
	}
	if v, ok := vu.mutation.LocalPartyKey(); ok {
		if err := vault.LocalPartyKeyValidator(v); err != nil {
			return &ValidationError{Name: "local_party_key", err: fmt.Errorf(`ent: validator failed for field "Vault.local_party_key": %w`, err)}
		}
	}
	if v, ok := vu.mutation.ChainCodeHex(); ok {
		if err := vault.ChainCodeHexValidator(v); err != nil {
			return &ValidationError{Name: "chain_code_hex", err: fmt.Errorf(`ent: validator failed for field "Vault.chain_code_hex": %w`, err)}
		}
	}
	return nil
}

func (vu *VaultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vault.Table, vault.Columns, sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(vault.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.PubKey(); ok {
		_spec.SetField(vault.FieldPubKey, field.TypeString, value)
	}
	if vu.mutation.PubKeyCleared() {
		_spec.ClearField(vault.FieldPubKey, field.TypeString)
	}
	if value, ok := vu.mutation.KeygenCommitteeKeys(); ok {
		_spec.SetField(vault.FieldKeygenCommitteeKeys, field.TypeJSON, value)
	}
	if value, ok := vu.mutation.AppendedKeygenCommitteeKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vault.FieldKeygenCommitteeKeys, value)
		})
	}
	if vu.mutation.KeygenCommitteeKeysCleared() {
		_spec.ClearField(vault.FieldKeygenCommitteeKeys, field.TypeJSON)
	}
	if value, ok := vu.mutation.LocalPartyKey(); ok {
		_spec.SetField(vault.FieldLocalPartyKey, field.TypeString, value)
	}
	if value, ok := vu.mutation.ChainCodeHex(); ok {
		_spec.SetField(vault.FieldChainCodeHex, field.TypeString, value)
	}
	if value, ok := vu.mutation.ResharePrefix(); ok {
		_spec.SetField(vault.FieldResharePrefix, field.TypeString, value)
	}
	if vu.mutation.ResharePrefixCleared() {
		_spec.ClearField(vault.FieldResharePrefix, field.TypeString)
	}
	if vu.mutation.PaillierSkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.PaillierSkTable,
			Columns: []string{vault.PaillierSkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pailliersk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PaillierSkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.PaillierSkTable,
			Columns: []string{vault.PaillierSkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pailliersk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.EcdsaLocalDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EcdsaLocalDataTable,
			Columns: []string{vault.EcdsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EcdsaLocalDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EcdsaLocalDataTable,
			Columns: []string{vault.EcdsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.EddsaLocalDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EddsaLocalDataTable,
			Columns: []string{vault.EddsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eddsalocaldata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EddsaLocalDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EddsaLocalDataTable,
			Columns: []string{vault.EddsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eddsalocaldata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VaultUpdateOne is the builder for updating a single Vault entity.
type VaultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VaultMutation
}

// SetName sets the "name" field.
func (vuo *VaultUpdateOne) SetName(s string) *VaultUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillableName(s *string) *VaultUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetPubKey sets the "pub_key" field.
func (vuo *VaultUpdateOne) SetPubKey(s string) *VaultUpdateOne {
	vuo.mutation.SetPubKey(s)
	return vuo
}

// SetNillablePubKey sets the "pub_key" field if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillablePubKey(s *string) *VaultUpdateOne {
	if s != nil {
		vuo.SetPubKey(*s)
	}
	return vuo
}

// ClearPubKey clears the value of the "pub_key" field.
func (vuo *VaultUpdateOne) ClearPubKey() *VaultUpdateOne {
	vuo.mutation.ClearPubKey()
	return vuo
}

// SetKeygenCommitteeKeys sets the "keygen_committee_keys" field.
func (vuo *VaultUpdateOne) SetKeygenCommitteeKeys(s []string) *VaultUpdateOne {
	vuo.mutation.SetKeygenCommitteeKeys(s)
	return vuo
}

// AppendKeygenCommitteeKeys appends s to the "keygen_committee_keys" field.
func (vuo *VaultUpdateOne) AppendKeygenCommitteeKeys(s []string) *VaultUpdateOne {
	vuo.mutation.AppendKeygenCommitteeKeys(s)
	return vuo
}

// ClearKeygenCommitteeKeys clears the value of the "keygen_committee_keys" field.
func (vuo *VaultUpdateOne) ClearKeygenCommitteeKeys() *VaultUpdateOne {
	vuo.mutation.ClearKeygenCommitteeKeys()
	return vuo
}

// SetLocalPartyKey sets the "local_party_key" field.
func (vuo *VaultUpdateOne) SetLocalPartyKey(s string) *VaultUpdateOne {
	vuo.mutation.SetLocalPartyKey(s)
	return vuo
}

// SetNillableLocalPartyKey sets the "local_party_key" field if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillableLocalPartyKey(s *string) *VaultUpdateOne {
	if s != nil {
		vuo.SetLocalPartyKey(*s)
	}
	return vuo
}

// SetChainCodeHex sets the "chain_code_hex" field.
func (vuo *VaultUpdateOne) SetChainCodeHex(s string) *VaultUpdateOne {
	vuo.mutation.SetChainCodeHex(s)
	return vuo
}

// SetNillableChainCodeHex sets the "chain_code_hex" field if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillableChainCodeHex(s *string) *VaultUpdateOne {
	if s != nil {
		vuo.SetChainCodeHex(*s)
	}
	return vuo
}

// SetResharePrefix sets the "reshare_prefix" field.
func (vuo *VaultUpdateOne) SetResharePrefix(s string) *VaultUpdateOne {
	vuo.mutation.SetResharePrefix(s)
	return vuo
}

// SetNillableResharePrefix sets the "reshare_prefix" field if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillableResharePrefix(s *string) *VaultUpdateOne {
	if s != nil {
		vuo.SetResharePrefix(*s)
	}
	return vuo
}

// ClearResharePrefix clears the value of the "reshare_prefix" field.
func (vuo *VaultUpdateOne) ClearResharePrefix() *VaultUpdateOne {
	vuo.mutation.ClearResharePrefix()
	return vuo
}

// SetPaillierSkID sets the "paillier_sk" edge to the PaillierSK entity by ID.
func (vuo *VaultUpdateOne) SetPaillierSkID(id int) *VaultUpdateOne {
	vuo.mutation.SetPaillierSkID(id)
	return vuo
}

// SetNillablePaillierSkID sets the "paillier_sk" edge to the PaillierSK entity by ID if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillablePaillierSkID(id *int) *VaultUpdateOne {
	if id != nil {
		vuo = vuo.SetPaillierSkID(*id)
	}
	return vuo
}

// SetPaillierSk sets the "paillier_sk" edge to the PaillierSK entity.
func (vuo *VaultUpdateOne) SetPaillierSk(p *PaillierSK) *VaultUpdateOne {
	return vuo.SetPaillierSkID(p.ID)
}

// SetEcdsaLocalDataID sets the "ecdsa_local_data" edge to the EcdsaLocalData entity by ID.
func (vuo *VaultUpdateOne) SetEcdsaLocalDataID(id int) *VaultUpdateOne {
	vuo.mutation.SetEcdsaLocalDataID(id)
	return vuo
}

// SetNillableEcdsaLocalDataID sets the "ecdsa_local_data" edge to the EcdsaLocalData entity by ID if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillableEcdsaLocalDataID(id *int) *VaultUpdateOne {
	if id != nil {
		vuo = vuo.SetEcdsaLocalDataID(*id)
	}
	return vuo
}

// SetEcdsaLocalData sets the "ecdsa_local_data" edge to the EcdsaLocalData entity.
func (vuo *VaultUpdateOne) SetEcdsaLocalData(e *EcdsaLocalData) *VaultUpdateOne {
	return vuo.SetEcdsaLocalDataID(e.ID)
}

// SetEddsaLocalDataID sets the "eddsa_local_data" edge to the EddsaLocalData entity by ID.
func (vuo *VaultUpdateOne) SetEddsaLocalDataID(id int) *VaultUpdateOne {
	vuo.mutation.SetEddsaLocalDataID(id)
	return vuo
}

// SetNillableEddsaLocalDataID sets the "eddsa_local_data" edge to the EddsaLocalData entity by ID if the given value is not nil.
func (vuo *VaultUpdateOne) SetNillableEddsaLocalDataID(id *int) *VaultUpdateOne {
	if id != nil {
		vuo = vuo.SetEddsaLocalDataID(*id)
	}
	return vuo
}

// SetEddsaLocalData sets the "eddsa_local_data" edge to the EddsaLocalData entity.
func (vuo *VaultUpdateOne) SetEddsaLocalData(e *EddsaLocalData) *VaultUpdateOne {
	return vuo.SetEddsaLocalDataID(e.ID)
}

// Mutation returns the VaultMutation object of the builder.
func (vuo *VaultUpdateOne) Mutation() *VaultMutation {
	return vuo.mutation
}

// ClearPaillierSk clears the "paillier_sk" edge to the PaillierSK entity.
func (vuo *VaultUpdateOne) ClearPaillierSk() *VaultUpdateOne {
	vuo.mutation.ClearPaillierSk()
	return vuo
}

// ClearEcdsaLocalData clears the "ecdsa_local_data" edge to the EcdsaLocalData entity.
func (vuo *VaultUpdateOne) ClearEcdsaLocalData() *VaultUpdateOne {
	vuo.mutation.ClearEcdsaLocalData()
	return vuo
}

// ClearEddsaLocalData clears the "eddsa_local_data" edge to the EddsaLocalData entity.
func (vuo *VaultUpdateOne) ClearEddsaLocalData() *VaultUpdateOne {
	vuo.mutation.ClearEddsaLocalData()
	return vuo
}

// Where appends a list predicates to the VaultUpdate builder.
func (vuo *VaultUpdateOne) Where(ps ...predicate.Vault) *VaultUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VaultUpdateOne) Select(field string, fields ...string) *VaultUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vault entity.
func (vuo *VaultUpdateOne) Save(ctx context.Context) (*Vault, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VaultUpdateOne) SaveX(ctx context.Context) *Vault {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VaultUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VaultUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VaultUpdateOne) check() error {
	if v, ok := vuo.mutation.Name(); ok {
		if err := vault.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vault.name": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.PubKey(); ok {
		if err := vault.PubKeyValidator(v); err != nil {
			return &ValidationError{Name: "pub_key", err: fmt.Errorf(`ent: validator failed for field "Vault.pub_key": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.LocalPartyKey(); ok {
		if err := vault.LocalPartyKeyValidator(v); err != nil {
			return &ValidationError{Name: "local_party_key", err: fmt.Errorf(`ent: validator failed for field "Vault.local_party_key": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.ChainCodeHex(); ok {
		if err := vault.ChainCodeHexValidator(v); err != nil {
			return &ValidationError{Name: "chain_code_hex", err: fmt.Errorf(`ent: validator failed for field "Vault.chain_code_hex": %w`, err)}
		}
	}
	return nil
}

func (vuo *VaultUpdateOne) sqlSave(ctx context.Context) (_node *Vault, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vault.Table, vault.Columns, sqlgraph.NewFieldSpec(vault.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vault.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vault.FieldID)
		for _, f := range fields {
			if !vault.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(vault.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.PubKey(); ok {
		_spec.SetField(vault.FieldPubKey, field.TypeString, value)
	}
	if vuo.mutation.PubKeyCleared() {
		_spec.ClearField(vault.FieldPubKey, field.TypeString)
	}
	if value, ok := vuo.mutation.KeygenCommitteeKeys(); ok {
		_spec.SetField(vault.FieldKeygenCommitteeKeys, field.TypeJSON, value)
	}
	if value, ok := vuo.mutation.AppendedKeygenCommitteeKeys(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vault.FieldKeygenCommitteeKeys, value)
		})
	}
	if vuo.mutation.KeygenCommitteeKeysCleared() {
		_spec.ClearField(vault.FieldKeygenCommitteeKeys, field.TypeJSON)
	}
	if value, ok := vuo.mutation.LocalPartyKey(); ok {
		_spec.SetField(vault.FieldLocalPartyKey, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ChainCodeHex(); ok {
		_spec.SetField(vault.FieldChainCodeHex, field.TypeString, value)
	}
	if value, ok := vuo.mutation.ResharePrefix(); ok {
		_spec.SetField(vault.FieldResharePrefix, field.TypeString, value)
	}
	if vuo.mutation.ResharePrefixCleared() {
		_spec.ClearField(vault.FieldResharePrefix, field.TypeString)
	}
	if vuo.mutation.PaillierSkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.PaillierSkTable,
			Columns: []string{vault.PaillierSkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pailliersk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PaillierSkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.PaillierSkTable,
			Columns: []string{vault.PaillierSkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pailliersk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.EcdsaLocalDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EcdsaLocalDataTable,
			Columns: []string{vault.EcdsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EcdsaLocalDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EcdsaLocalDataTable,
			Columns: []string{vault.EcdsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ecdsalocaldata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.EddsaLocalDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EddsaLocalDataTable,
			Columns: []string{vault.EddsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eddsalocaldata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EddsaLocalDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vault.EddsaLocalDataTable,
			Columns: []string{vault.EddsaLocalDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eddsalocaldata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vault{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
